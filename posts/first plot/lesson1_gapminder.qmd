---
title: '<span class="humans-learning-post">Humans Learning</span>'
subtitle: "Getting started in R with Gapminder"
categories: [R, ggplot, start]
date: "November 1, 2024"
author: "Brian Calhoon"
title-block-banner: "#C9C9C9"
image: "gapminder.png"
format: 
  html:
    code-fold: false
    code-summary: "Show the code"
    toc: true
    css: styles.css
    
editor: visual
filters: 
  - webr
---

```{r global_options, include=F, warning=F, message=F, error=F}

options(repos = c(CRAN = "https://cloud.r-project.org/"))

## custom colors
my_pal <- c("#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288",
            "#AA4499", "#44AA99", "#999933", "#882255", "#661100",
            "#6699CC", "#888888", "#764E9F", "#ED645A", "#edd9a3")

#theme for ggplot2 objects
theme.plot <- function(){
  require(extrafont)
  require(extrafontdb)
  require(ggplot2)
  list(  
    ggplot2::theme(legend.position = "top"
                   , legend.background = ggplot2::element_blank()
                   , legend.title = ggplot2::element_blank()
                   , legend.key = ggplot2::element_blank() 
                   , axis.ticks = ggplot2::element_blank()
                   , axis.line = ggplot2::element_blank()
                   , panel.grid.minor = ggplot2::element_blank()
                   , panel.grid.major.y = ggplot2::element_line(color = "#CFCDC9") 
                   , panel.grid.major.x = ggplot2::element_blank()
                   , panel.background = ggplot2::element_blank()
                   , plot.title.position = "plot" #Pushes the title to the very left of the plot window
                   , plot.title = element_text(size = 26, family = "Corbel", color = "#000000")
                   , plot.subtitle = element_text(size = 18, family = "Corbel", color = "#A9A9A9")
                   , strip.background = ggplot2::element_rect(fill = "white") 
                   , axis.text = ggplot2::element_text(size = 14, family = "Corbel", hjust = 0, color = "#000000")
                   , plot.caption = ggplot2::element_text(size = 10, family = "Corbel", color = "#000000"))
    #The colors below are from the cartocolor "Safe" palette plus 3 additional colors pulled from cartocolor.
    , ggplot2::scale_fill_manual(values = c("#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288",
                                            "#AA4499", "#44AA99", "#999933", "#882255", "#661100",
                                            "#6699CC", "#888888", "#764E9F", "#ED645A", "#edd9a3"))
    , ggplot2::scale_color_manual(values = c("#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288",
                                             "#AA4499", "#44AA99", "#999933", "#882255", "#661100",
                                             "#6699CC", "#888888", "#764E9F", "#ED645A", "#edd9a3"))
  )}

```

# Why am I here?        `r fontawesome::fa("earlybirds", fill = "#FFB947", height = '2em', width = '2em')`

:::: box
::: box-header
Welcome to the first iteration of the Humans Learning lessons. If you are here then you are interested in learning something about data analysis through code. Each lesson is designed as a 5 - 10 minute virtual session conducted for EnCompass staff to expand their skills with data, and the means of learning is the R programming language. Each lesson will have learning objectives, some example code and explanation to demonstrate a technique or skill, and an open code chunk at the end for you to have some fun. Each lesson is captured in an html file for online access. This is all in the service of humans learning. Enjoy!
:::
::::

# Learning objectives

For this first course, the learning objectives are to:

-   Install and load the `tidyverse` and `gapminder` packages in your RStudio console

-   Make your first plot

## Install and load packages

In your R script, you will use the `install.packages()` and `library()` functions to install and load the two packages Tidyverse and Gapminder.

Tidyverse provides a suite of compatible data wrangling and visualization tools. Gapminder provides a dataset extracted from the global trend data maintained by, https://www.gapminder.org/.

```{r warning=F, message=F}
#| class-output: pre

#Installs the package on your system.
#install.packages(c("tidyverse", "gapminder"))

#load the libraries so you can use them
library(tidyverse)
library(gapminder)


```

## View the data

Now that you have completed the first step it is time to view the data. To look at just the first six rows so you can see the variable names and structure of the data pass `gapminder` to `head()` as in the code below.

```{r data}
#| class-output: pre

#look at the gapminder dataset
head(gapminder)

```

To make it even easier to work with, you can assign `gapminder` to the object `df`. Now you only have to type `df` to see it. You can view only the variable names by passing `df` to `names()`.

```{r}
#| class-output: pre


#make gapminder an object
df <- gapminder

#read variable names
names(df)

```

## Make a plot

As fun as looking at data is, we probably want to do more. So, we should make our first plot using `ggplot()`. The structure of ggplot requires that we pass it an object (df), the type of `geom_*` we want to make (in this case a scatterplot), and the aesthetics or the variables we want to plot. The code below provides a first plot.

Then we make the plot an object.

```{r plot}

#make a plot
ggplot(data = df) +
  geom_point(aes(x = gdpPercap, y = lifeExp, color = continent)
             , alpha = .4) 

#make the plot an object
plot <- ggplot(data = df) +
  geom_point(aes(x = gdpPercap, y = lifeExp, color =  continent)
             , alpha = .4) 
```

This next plot does a little more by adding to the `plot` object. We rescaled the data to correct for some outliers and we added a smoothing line to help readers interpret the trend easily.

```{r plot more}

#use the object to add more things to the plot
plot +  
  
  #rescale data
  scale_x_log10() + 
  
  #add a smoothing line
  geom_smooth(aes(x = gdpPercap, y = lifeExp))

```

## Have fun!

Now it's your turn practice! Below is a fully functioning code editor with starting code in place. Try changing the variables or changing the type of chart from a scatter plot (`geom_point()`) to a line graph (`geom_line()`) or a bar graph (`geom_col()` or `geom_bar()`).

```{webr-r}

library(tidyverse)
library(gapminder)

df <- gapminder

ggplot(df) +
  geom_point(aes(x = pop, y = lifeExp, color = continent)
             , alpha = .6)


```
