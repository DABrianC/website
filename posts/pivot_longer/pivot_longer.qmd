---
title: '<span class="humans-learning-post">Humans Learning</span>'
subtitle: ": UNDER CONSTRUCTION: Pivoting data longer"
categories: [data, reading]
date: "December 12, 2024"
author: "Brian Calhoon"
title-block-banner: "#C9C9C9"

format: 
  html:
    code-fold: false
    code-summary: "Show the code"
    toc: true
    css: styles.css
editor: visual
filters: 
  - webr
---

```{r global_options, include=F, warnings=F, messages=F, error=F}

## custom colors
my_pal <- c("#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288",
            "#AA4499", "#44AA99", "#999933", "#882255", "#661100",
            "#6699CC", "#888888", "#764E9F", "#ED645A", "#edd9a3")

#theme for ggplot2 objects
theme.plot <- function(){
  require(extrafont)
  require(extrafontdb)
  require(ggplot2)
  list(  
    ggplot2::theme(legend.position = "top"
                   , legend.background = ggplot2::element_blank()
                   , legend.title = ggplot2::element_blank()
                   , legend.key = ggplot2::element_blank() 
                   , axis.ticks = ggplot2::element_blank()
                   , axis.line = ggplot2::element_blank()
                   , panel.grid.minor = ggplot2::element_blank()
                   , panel.grid.major.y = ggplot2::element_line(color = "#CFCDC9") 
                   , panel.grid.major.x = ggplot2::element_blank()
                   , panel.background = ggplot2::element_blank()
                   , plot.title.position = "plot" #Pushes the title to the very left of the plot window
                   , plot.title = element_text(size = 26, family = "Corbel", color = "#000000")
                   , plot.subtitle = element_text(size = 18, family = "Corbel", color = "#A9A9A9")
                   , strip.background = ggplot2::element_rect(fill = "white") 
                   , axis.text = ggplot2::element_text(size = 14, family = "Corbel", hjust = 0, color = "#000000")
                   , plot.caption = ggplot2::element_text(size = 10, family = "Corbel", color = "#000000"))
    #The colors below are from the cartocolor "Safe" palette plus 3 additional colors pulled from cartocolor.
    , ggplot2::scale_fill_manual(values = c("#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288",
                                            "#AA4499", "#44AA99", "#999933", "#882255", "#661100",
                                            "#6699CC", "#888888", "#764E9F", "#ED645A", "#edd9a3"))
    , ggplot2::scale_color_manual(values = c("#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288",
                                             "#AA4499", "#44AA99", "#999933", "#882255", "#661100",
                                             "#6699CC", "#888888", "#764E9F", "#ED645A", "#edd9a3"))
  )}
```

# Why am I here?        `r fontawesome::fa("earlybirds", fill = "#FFB947", height = '2em', width = '2em')`

:::: box
::: box-header
Welcome back! As a reminder, each lesson is designed as a 5 - 10 minute virtual session conducted for EnCompass staff to expand their skills with data, and the means of learning is the R programming language. 

- Usefullness of pivoting data
:::
::::

# Learning objectives

For this session, the learning objective is to:

-   Reshape data from wide to long

# What is the point of this?

Good question. When we collect data in the real and virtual worlds it often comes in a wide format with a question in a column followed by a few columns with options for responses. Here's an simple example to illustrate the point.

As always, make sure the correct packages are active in the session.

```{r}
#| class-output: pre

# installing packages
#install.packages("tidyverse")
#install.packages("readxl")
#install.packages("writexl")
#install.packages("here")
#install.packages("writexl")

# another option for installing packages
#install.packages(c("tidyverse", "readxl", "writexl", "here", "writexl"))


library(tidyverse)
library(readxl)
library(writexl)
library(here)

```

```{r}

df <- read_xlsx(here::here("posts/pivot_longer/colors.xlsx")) 

df

```


## Indeed, this data is Wide 

We've got five columns of data for a respondent's favorite color, and for some reason person F selected 3 colors. The column with the question just holds the question variable and is blank. The majority of rows in these columns are also blank. We've got a single variable spread out over a bunch of columns. To simplify this, let's put these all in a single column.

## Reshaping

We'll create a new object called df1. This maintains our original df object. Then, let's eliminate the 2nd column that is all blanks. The final step is to pivot the columns with the 1s into a single column, and to change the 1s to the name of each color. Here's the code. 

```{r}
#| class-output: pre

df1 <- df |> 
  select(-2) |>  #eliminate 2nd column
  pivot_longer(cols = 2:5,
               names_to = "fav_color",
               values_drop_na = TRUE)

df1
```

Success!


```{webr-r}

library(tidyverse)
library(readxl)

df <- read_xlsx("https://github.com/DABrianC/website/blob/main/posts/pivot_longer/colors.xlsx")


```
