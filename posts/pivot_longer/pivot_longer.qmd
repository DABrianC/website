---
title: '<span class="humans-learning-post">Humans Learning</span>'
subtitle: "Reshaping data from wide to longer"
categories: [R, data, tidyr, pivot]
date: "2024-12-12"
author: "Brian Calhoon"
title-block-banner: "#C9C9C9"
image: "eyes.jpg"
format: 
  html:
    code-fold: false
    code-summary: "Show the code"
    toc: true
    css: styles.css
editor: visual
execute:
  message: false
  warning: false
filters: 
  - webr
---

```{r global_options, include=F, warnings=F, messages=F, error=F}

## custom colors
my_pal <- c("#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288",
            "#AA4499", "#44AA99", "#999933", "#882255", "#661100",
            "#6699CC", "#888888", "#764E9F", "#ED645A", "#edd9a3")

#theme for ggplot2 objects
theme.plot <- function(){
  require(extrafont)
  require(extrafontdb)
  require(ggplot2)
  list(  
    ggplot2::theme(legend.position = "top"
                   , legend.background = ggplot2::element_blank()
                   , legend.title = ggplot2::element_blank()
                   , legend.key = ggplot2::element_blank() 
                   , axis.ticks = ggplot2::element_blank()
                   , axis.line = ggplot2::element_blank()
                   , panel.grid.minor = ggplot2::element_blank()
                   , panel.grid.major.y = ggplot2::element_line(color = "#CFCDC9") 
                   , panel.grid.major.x = ggplot2::element_blank()
                   , panel.background = ggplot2::element_blank()
                   , plot.title.position = "plot" #Pushes the title to the very left of the plot window
                   , plot.title = element_text(size = 26, family = "Corbel", color = "#000000")
                   , plot.subtitle = element_text(size = 18, family = "Corbel", color = "#A9A9A9")
                   , strip.background = ggplot2::element_rect(fill = "white") 
                   , axis.text = ggplot2::element_text(size = 14, family = "Corbel", hjust = 0, color = "#000000")
                   , plot.caption = ggplot2::element_text(size = 10, family = "Corbel", color = "#000000"))
    #The colors below are from the cartocolor "Safe" palette plus 3 additional colors pulled from cartocolor.
    , ggplot2::scale_fill_manual(values = c("#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288",
                                            "#AA4499", "#44AA99", "#999933", "#882255", "#661100",
                                            "#6699CC", "#888888", "#764E9F", "#ED645A", "#edd9a3"))
    , ggplot2::scale_color_manual(values = c("#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288",
                                             "#AA4499", "#44AA99", "#999933", "#882255", "#661100",
                                             "#6699CC", "#888888", "#764E9F", "#ED645A", "#edd9a3"))
  )}
```

# Why am I here?        `r fontawesome::fa("earlybirds", fill = "#FFB947", height = '2em', width = '2em')`

:::: box
::: box-header
Welcome back! As a reminder, each lesson is designed as a 5 - 10 minute virtual session conducted for EnCompass staff to expand their skills with data, and the means of learning is the R programming language.

-   Usefulness of pivoting data
:::
::::

# Learning objectives

For this session, the learning objective is to:

-   Reshape data from wide to long data

As always, make sure the correct packages are active in the session.

```{r}
#| class-output: pre

# installing packages
#install.packages("tidyverse")
#install.packages("readxl")
#install.packages("writexl")
#install.packages("here")
#install.packages("writexl")

# another option for installing packages
#install.packages(c("tidyverse", "readxl", "writexl", "here", "writexl"))


library(tidyverse)
library(readxl)
library(writexl)
library(here)

```

# What is the point of this?

Good question. When we collect data in the real and virtual worlds it is rarely structured for analysis. A common need is that we have to pivot a dataset from a wide to a long format. A dataset often comes in a wide format with a question in a column followed by a few columns with options for responses where each option is its own column. Here's an simple example to illustrate the point.

```{r}

df <- read_xlsx(here::here("posts/pivot_longer/colors.xlsx")) 

knitr::kable(df)

```

## Indeed, this data is Wide

We've got five columns of data for a respondent's favorite color, and for some reason person F selected 3 colors. Here are a few more observations.

-   The column with the question just holds the question variable and is blank.

-   The majority of rows in these columns are also blank.

-   A single variable - favorite color - is spread out over a bunch of columns.

To simplify this, let's put these all in a single column.

## Reshaping

We'll create a new object called df1. This maintains our original df object in case we still have a need for the original object. Then, let's eliminate the 2nd column that is all blanks. Next, pivot the columns with the 1s in a single column, and change the 1s to the name of each color. Finally, we should put pivotted data in a column with a name that is clear and useful for coding -- fav_color. Here's the code to do this.

```{r}
#| class-output: pre

df1 <- df |> 
  select(-2) |>  #eliminates the 2nd column
  pivot_longer(cols = 2:5, #use these columns for the transformation
               names_to = "fav_color", #Name the column where the the color names are stored
               values_drop_na = TRUE) #remove the rows with missing data

knitr::kable(df1) 
```

Success! Within the `pivot_longer()` call, we told it to use columns 2 through 5 since we want to keep the Resp(ondents) column unchanged. We maintained the first column and added additional rows to account for the multiple colors selected by Resp F.

## Have fun!

Now it's your turn practice! Below is a fully functioning code editor with starting code in place. Try pivoting data, and then feel free to make a bar chart using ggplot + geom_bar() (or geom_col()).

```{webr-r}

library(tidyverse)
library(readxl)

df <- read_xlsx("https://github.com/DABrianC/website/blob/main/posts/pivot_longer/colors.xlsx")


```
