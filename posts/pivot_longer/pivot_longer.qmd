---
title: '<span class="humans-learning-post">Humans Learning</span>'
subtitle: "Pivoting data longer"
categories: [data, reading]
date: "December 12, 2024"
author: "Brian Calhoon"
title-block-banner: "#C9C9C9"

format: 
  html:
    code-fold: false
    code-summary: "Show the code"
    toc: true
    css: styles.css
editor: visual
filters: 
  - webr
---

```{r global_options, include=F, warning=F, message=F, error=F}

## custom colors
my_pal <- c("#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288",
            "#AA4499", "#44AA99", "#999933", "#882255", "#661100",
            "#6699CC", "#888888", "#764E9F", "#ED645A", "#edd9a3")

#theme for ggplot2 objects
theme.plot <- function(){
  require(extrafont)
  require(extrafontdb)
  require(ggplot2)
  list(  
    ggplot2::theme(legend.position = "top"
                   , legend.background = ggplot2::element_blank()
                   , legend.title = ggplot2::element_blank()
                   , legend.key = ggplot2::element_blank() 
                   , axis.ticks = ggplot2::element_blank()
                   , axis.line = ggplot2::element_blank()
                   , panel.grid.minor = ggplot2::element_blank()
                   , panel.grid.major.y = ggplot2::element_line(color = "#CFCDC9") 
                   , panel.grid.major.x = ggplot2::element_blank()
                   , panel.background = ggplot2::element_blank()
                   , plot.title.position = "plot" #Pushes the title to the very left of the plot window
                   , plot.title = element_text(size = 26, family = "Corbel", color = "#000000")
                   , plot.subtitle = element_text(size = 18, family = "Corbel", color = "#A9A9A9")
                   , strip.background = ggplot2::element_rect(fill = "white") 
                   , axis.text = ggplot2::element_text(size = 14, family = "Corbel", hjust = 0, color = "#000000")
                   , plot.caption = ggplot2::element_text(size = 10, family = "Corbel", color = "#000000"))
    #The colors below are from the cartocolor "Safe" palette plus 3 additional colors pulled from cartocolor.
    , ggplot2::scale_fill_manual(values = c("#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288",
                                            "#AA4499", "#44AA99", "#999933", "#882255", "#661100",
                                            "#6699CC", "#888888", "#764E9F", "#ED645A", "#edd9a3"))
    , ggplot2::scale_color_manual(values = c("#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288",
                                             "#AA4499", "#44AA99", "#999933", "#882255", "#661100",
                                             "#6699CC", "#888888", "#764E9F", "#ED645A", "#edd9a3"))
  )}
```

# Why am I here?        `r fontawesome::fa("earlybirds", fill = "#FFB947", height = '2em', width = '2em')`

:::: box
::: box-header
Welcome back! As a reminder, each lesson is designed as a 5 - 10 minute virtual session conducted for EnCompass staff to expand their skills with data, and the means of learning is the R programming language. 

- Usefullness of pivoting data
:::
::::

# Learning objectives

For this session, the learning objective is to:

-   Import data from a .csv file and a .xlsx file

-   Write data to a .xlsx file

# Wait, how does the data get into the Rstudio thingy?

Most data that is used in the workplace comes in the form of a .csv file or a Excel file. If you're lucky, maybe you can import data directly from your company's database or you download reliable data from the internet using an API. The reality is that you'll probably get emails with Excel files attached so it's important to know how to access these.

## Install and load packages

If you already have the packages below installed, then you don't need to install them again. I \#'d the `install.packages()` lines so that the code doesn't run for me. You can delete the \#'s if you need to install the packages.

Then, activate the packages with the `library()` so they are active in your session.

```{r}
#| class-output: pre

# installing packages
#install.packages("tidyverse")
#install.packages("readxl")
#install.packages("writexl")
#install.packages("here")
#install.packages("writexl")

# another option for installing packages
#install.packages(c("tidyverse", "readxl", "writexl", "here", "writexl"))


library(tidyverse)
library(readxl)
library(writexl)
library(here)

```

## Read in files

Previously our data was included in the gapminder package. You can find lots of training data sets in packages, and this is really useful, but it's not how you will get most of your data in the workplace. So, let's get to it.

### CSV file

```{r}
#| class-output: pre

# read the data in and assign it to a variable
df_csv <- read_csv(here::here("posts/read file/testdata2.csv"))

#check the data

dplyr::glimpse(df_csv)
```

Success!

### Excel file

```{r}
#| class-output: pre

# read the data in and assign it to a variable
df_xlsx <- read_xlsx(here::here("posts/read file/testdata2.xlsx"))

#check the data

dplyr::glimpse(df_xlsx)
```

Success!

## Mutate the dataset

We can see that both datasets are identical with 20 rows (observations) across 9 columns. So, pick either one and we'll add a variable called income using the `mutate()` function. This will add a column, and we will save it under as a new object that we will write back to an Excel file so we can email to our colleague.

```{r}
#| class-output: pre

# add a new variable to the dataset
df_add <- df_xlsx |> #pipe df to the mutate function
  dplyr::mutate(income = sample(1000:7500, 20))

#view first 6 rows

head(df_add)

#view last 6 rows
tail(df_add)
```

We're using the basic manipulation skills that we saw with the Gapminder dataset in the previous lessons.

## Write it to Excel or CSV

Here all we need to do is specify the object and provide it a path where we want the file to be saved. You should write it to somewhere in your documents folder to avoid any issues with One Drive or Google Drive. N.B. with `write_csv()` path becomes file.

```{r}
#| class-output: pre

write_xlsx(x = df_add, path = here::here("posts/read file/test_out.xlsx"))

write_csv(x = df_add, file = here::here("posts/read file/test_out.csv"))

```

Now you can email this updated .xlsx/.csv file to your colleague. :)

## Have fun!

Now it's your turn practice! Below is a fully functioning code editor with starting code in place. Feel free to experiment with different grouping variables in the `group_by()` call or to adjust the summary statistic in `summarize()`. Then, have fun with the plot!

```{webr-r}

library(tidyverse)
library(readxl)
library(writexl)
library(here)

df <- read_xlsx("https://github.com/DABrianC/website/blob/main/posts/read%20file/testdata2.xlsx"))


```
