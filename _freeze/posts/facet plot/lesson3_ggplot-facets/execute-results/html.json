{
  "hash": "8528dd8b903a3356773d4843755c2fee",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Humans Learning\"\nsubtitle: \"Lesson 3: Faceting plots using ggplot\"\ndate: \"November 22, 2024\"\nauthor: \"Brian Calhoon\"\ntitle-block-banner: \"#C9C9C9\"\nformat: \n  html:\n    code-fold: false\n    code-summary: \"Show the code\"\n    toc: true\n    css: prep/styles.css\neditor: visual\nfilters: \n  - webr\n---\n\n\n\n\n\n# Why am I here?        `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 480 512\" style=\"height:2em;width:2em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#FFB947;overflow:visible;position:relative;\"><path d=\"M313.2 47.5c1.2-13 21.3-14 36.6-8.7.9.3 26.2 9.7 19 15.2-27.9-7.4-56.4 18.2-55.6-6.5zm-201 6.9c30.7-8.1 62 20 61.1-7.1-1.3-14.2-23.4-15.3-40.2-9.6-1 .3-28.7 10.5-20.9 16.7zM319.4 160c-8.8 0-16 7.2-16 16s7.2 16 16 16 16-7.2 16-16-7.2-16-16-16zm-159.7 0c-8.8 0-16 7.2-16 16s7.2 16 16 16 16-7.2 16-16-7.2-16-16-16zm318.5 163.2c-9.9 24-40.7 11-63.9-1.2-13.5 69.1-58.1 111.4-126.3 124.2.3.9-2-.1 24 1 33.6 1.4 63.8-3.1 97.4-8-19.8-13.8-11.4-37.1-9.8-38.1 1.4-.9 14.7 1.7 21.6 11.5 8.6-12.5 28.4-14.8 30.2-13.6 1.6 1.1 6.6 20.9-6.9 34.6 4.7-.9 8.2-1.6 9.8-2.1 2.6-.8 17.7 11.3 3.1 13.3-14.3 2.3-22.6 5.1-47.1 10.8-45.9 10.7-85.9 11.8-117.7 12.8l1 11.6c3.8 18.1-23.4 24.3-27.6 6.2.8 17.9-27.1 21.8-28.4-1l-.5 5.3c-.7 18.4-28.4 17.9-28.3-.6-7.5 13.5-28.1 6.8-26.4-8.5l1.2-12.4c-36.7.9-59.7 3.1-61.8 3.1-20.9 0-20.9-31.6 0-31.6 2.4 0 27.7 1.3 63.2 2.8-61.1-15.5-103.7-55-114.9-118.2-25 12.8-57.5 26.8-68.2.8-10.5-25.4 21.5-42.6 66.8-73.4.7-6.6 1.6-13.3 2.7-19.8-14.4-19.6-11.6-36.3-16.1-60.4-16.8 2.4-23.2-9.1-23.6-23.1.3-7.3 2.1-14.9 2.4-15.4 1.1-1.8 10.1-2 12.7-2.6 6-31.7 50.6-33.2 90.9-34.5 19.7-21.8 45.2-41.5 80.9-48.3C203.3 29 215.2 8.5 216.2 8c1.7-.8 21.2 4.3 26.3 23.2 5.2-8.8 18.3-11.4 19.6-10.7 1.1.6 6.4 15-4.9 25.9 40.3 3.5 72.2 24.7 96 50.7 36.1 1.5 71.8 5.9 77.1 34 2.7.6 11.6.8 12.7 2.6.3.5 2.1 8.1 2.4 15.4-.5 13.9-6.8 25.4-23.6 23.1-3.2 17.3-2.7 32.9-8.7 47.7 2.4 11.7 4 23.8 4.8 36.4 37 25.4 70.3 42.5 60.3 66.9zM207.4 159.9c.9-44-37.9-42.2-78.6-40.3-21.7 1-38.9 1.9-45.5 13.9-11.4 20.9 5.9 92.9 23.2 101.2 9.8 4.7 73.4 7.9 86.3-7.1 8.2-9.4 15-49.4 14.6-67.7zm52 58.3c-4.3-12.4-6-30.1-15.3-32.7-2-.5-9-.5-11 0-10 2.8-10.8 22.1-17 37.2 15.4 0 19.3 9.7 23.7 9.7 4.3 0 6.3-11.3 19.6-14.2zm135.7-84.7c-6.6-12.1-24.8-12.9-46.5-13.9-40.2-1.9-78.2-3.8-77.3 40.3-.5 18.3 5 58.3 13.2 67.8 13 14.9 76.6 11.8 86.3 7.1 15.8-7.6 36.5-78.9 24.3-101.3z\"/></svg>`{=html}\n\n:::::::: columns\n:::: {.column width=\"20%\"}\n::: box-header\n![](prep/humanslearning.png)\n:::\n::::\n\n::::: {.column width=\"80%\"}\n:::: box\n::: box-header\nGreetings and welcome to the third iteration of Humans Learning. As a reminder, each lesson is designed as a 5 - 10 minute virtual session conducted for EnCompass staff to expand their skills with data, and the means of learning is the R programming language. Each lesson will have learning objectives, some example code and explanation to demonstrate a technique or skill, and an open code chunk at the end for you to have some fun. This is all in the service of humans learning. Enjoy!\n:::\n::::\n:::::\n::::::::\n\n# Learning objectives\n\nFor this session, the learning objectives are to:\n\n-   Understand `ggplot`'s facetting function to make multiple plots at once\n\n-   Make a facetted plot\n\n## Install and load packages\n\nIn your R script, you will use the `install.packages()` and `library()` functions to install and load the two packages Tidyverse and Gapminder.\n\nTidyverse provides a suite of compatible data wrangling and visualization tools. The workhorse of data visualization is the `ggplot2` package. With `ggplot2` the sky is the limit! From basic bar plots to animated graphics to interactive charts and tables connected by a common data source, `ggplot2` and its extension packages can do it all. And once again, Gapminder provides a dataset extracted from the global trend data maintained by, https://www.gapminder.org/.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Installs the package on your system.\ninstall.packages(c(\"tidyverse\", \"gapminder\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInstalling packages into 'C:/Users/brian/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n``` pre\npackage 'tidyverse' successfully unpacked and MD5 sums checked\npackage 'gapminder' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n\tC:\\Users\\brian\\AppData\\Local\\Temp\\RtmpgJO9Je\\downloaded_packages\n```\n\n\n:::\n\n```{.r .cell-code}\n#load the libraries so you can use them\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(gapminder)\n```\n:::\n\n\n\n## Set up the data\n\nSimilar to before, we need to ensure we have the data and that it's in a format that we can use. To look at just the first six rows so you can see the variable names and structure of the data pass `gapminder` to `head()` as in the code below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# assign gapminder to df \n# this is required, but it makes life easier\n# don't we all want life to be easier\n\ndf <- gapminder\n\n# look at the gapminder dataset\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` pre\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` pre\n# A tibble: 6 × 6\n  country  continent  year lifeExp      pop gdpPercap\n  <fct>    <fct>     <int>   <dbl>    <int>     <dbl>\n1 Zimbabwe Africa     1982    60.4  7636524      789.\n2 Zimbabwe Africa     1987    62.4  9216418      706.\n3 Zimbabwe Africa     1992    60.4 10704340      693.\n4 Zimbabwe Africa     1997    46.8 11404948      792.\n5 Zimbabwe Africa     2002    40.0 11926563      672.\n6 Zimbabwe Africa     2007    43.5 12311143      470.\n```\n\n\n:::\n:::\n\n\n\nIt look pretty clean and tidy. We'll explore some additional options for looking at data sets in the coming weeks.\n\n## Make a facetted plot\n\nWe've used `ggplot2` in the previous lessons so this will seem quite familiar. The structure of ggplot requires that we pass it an object (df), the type of `geom_*` we want to make (in this case a line plot), and the aesthetics (the variables we want to plot).\n\nWe can start with the plot from lesson two and assign it to the object, `plot`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#set up the data like last time\ndf1 <- df |> \n  group_by(continent, year) |> \n  summarize(avg_gdpPercap = mean(gdpPercap))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'continent'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code}\n#make a plot\nplot <- ggplot(df1) +\n  geom_line(aes(x = year, y = avg_gdpPercap, color = continent))\n```\n:::\n\n\n\nThat gives us the same line plot as last session.\n\nFacetting will separate each of this lines into their own plot panel. You can imagine that if you have lots of data on a single plot, it is easier to see if you can separate visualizations by one of the discrete variables.\n\nBelow, the data is separated by continent. Note that the axes across each plot panel are the same which allows for comparison. This is a default of the `facet_wrap()` function. There are cases where you would want to set this feature to false, but in most cases it allows for obvious comparisons across the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#| class-output: pre\n\n\nplot +\n  facet_wrap(facets = df1$continent)\n```\n\n::: {.cell-output-display}\n![](lesson3_ggplot-facets_files/figure-html/plot more-1.png){width=672}\n:::\n:::\n\n\n\nHere's another example that takes the data for one continent and facets it by country.\n\nFirst, we do a little data wrangling. Then, we plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#| class-output: pre\n\n#Filter\ndf2 <- df |> \n  filter(continent == \"Americas\") |>\n  group_by(country, year) |> \n  summarize(avg_gdpPercap = mean(gdpPercap))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'country'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n:::\n\n\n\n::: panel-tabset\n## Standard Plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#| class-output: pre\n\nplot_amer <- ggplot(df2) +\n  geom_line(aes(x = year, y = avg_gdpPercap, color = country)) +\n  labs(title = \"Standard Plot\") +\n  theme(legend.position = \"none\")\n\nplot_amer\n```\n\n::: {.cell-output-display}\n![](lesson3_ggplot-facets_files/figure-html/plot more years-1.png){width=672}\n:::\n:::\n\n\n\n## Facetted Plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_amer + \n  facet_wrap(facets = df2$country) +\n  labs(title = \"Facetted Plot\") +\n  theme(legend.position = \"none\"\n        , axis.text.x = element_text(angle = 45, vjust = .5, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](lesson3_ggplot-facets_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n:::\n\n## Have fun!\n\nNow it's your turn practice! Below is a fully functioning code editor with starting code in place. Feel free to experiment with different grouping variables in the `group_by()` call or to adjust the summary statistic in `summarize()`. Then, have fun with the plot!\n\n```{webr-r}\n\nlibrary(tidyverse)\nlibrary(gapminder)\n\ndf <- gapminder\n\ndf1 <- df |> \n  group_by(continent, year) |> \n  summarize(avg_gdpPercap = mean(gdpPercap))\n\nggplot(df1) +\n  geom_line(aes(x = year, y = avg_gdpPercap, color = continent))\n\n#now facet this into multiple plots\n\n```\n",
    "supporting": [
      "lesson3_ggplot-facets_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}