{
  "hash": "d1e66b50f9f3a56dd2bdb41e2640d307",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: '<span class=\"humans-learning-post\">Humans Learning</span>'\nsubtitle: \"Reading data from other sources\"\ncategories: [data, reading]\ndate: \"December 6, 2024\"\nauthor: \"Brian Calhoon\"\ntitle-block-banner: \"#C9C9C9\"\nimage: \"tbd\"\nformat: \n  html:\n    code-fold: false\n    code-summary: \"Show the code\"\n    toc: true\n    css: styles.css\neditor: visual\nfilters: \n  - webr\n---\n\n\n\n\n\n# Why am I here?        `<svg preserveAspectRatio=\"none\" aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 480 512\" style=\"height:2em;width:2em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#FFB947;overflow:visible;position:relative;\"><path d=\"M313.2 47.5c1.2-13 21.3-14 36.6-8.7.9.3 26.2 9.7 19 15.2-27.9-7.4-56.4 18.2-55.6-6.5zm-201 6.9c30.7-8.1 62 20 61.1-7.1-1.3-14.2-23.4-15.3-40.2-9.6-1 .3-28.7 10.5-20.9 16.7zM319.4 160c-8.8 0-16 7.2-16 16s7.2 16 16 16 16-7.2 16-16-7.2-16-16-16zm-159.7 0c-8.8 0-16 7.2-16 16s7.2 16 16 16 16-7.2 16-16-7.2-16-16-16zm318.5 163.2c-9.9 24-40.7 11-63.9-1.2-13.5 69.1-58.1 111.4-126.3 124.2.3.9-2-.1 24 1 33.6 1.4 63.8-3.1 97.4-8-19.8-13.8-11.4-37.1-9.8-38.1 1.4-.9 14.7 1.7 21.6 11.5 8.6-12.5 28.4-14.8 30.2-13.6 1.6 1.1 6.6 20.9-6.9 34.6 4.7-.9 8.2-1.6 9.8-2.1 2.6-.8 17.7 11.3 3.1 13.3-14.3 2.3-22.6 5.1-47.1 10.8-45.9 10.7-85.9 11.8-117.7 12.8l1 11.6c3.8 18.1-23.4 24.3-27.6 6.2.8 17.9-27.1 21.8-28.4-1l-.5 5.3c-.7 18.4-28.4 17.9-28.3-.6-7.5 13.5-28.1 6.8-26.4-8.5l1.2-12.4c-36.7.9-59.7 3.1-61.8 3.1-20.9 0-20.9-31.6 0-31.6 2.4 0 27.7 1.3 63.2 2.8-61.1-15.5-103.7-55-114.9-118.2-25 12.8-57.5 26.8-68.2.8-10.5-25.4 21.5-42.6 66.8-73.4.7-6.6 1.6-13.3 2.7-19.8-14.4-19.6-11.6-36.3-16.1-60.4-16.8 2.4-23.2-9.1-23.6-23.1.3-7.3 2.1-14.9 2.4-15.4 1.1-1.8 10.1-2 12.7-2.6 6-31.7 50.6-33.2 90.9-34.5 19.7-21.8 45.2-41.5 80.9-48.3C203.3 29 215.2 8.5 216.2 8c1.7-.8 21.2 4.3 26.3 23.2 5.2-8.8 18.3-11.4 19.6-10.7 1.1.6 6.4 15-4.9 25.9 40.3 3.5 72.2 24.7 96 50.7 36.1 1.5 71.8 5.9 77.1 34 2.7.6 11.6.8 12.7 2.6.3.5 2.1 8.1 2.4 15.4-.5 13.9-6.8 25.4-23.6 23.1-3.2 17.3-2.7 32.9-8.7 47.7 2.4 11.7 4 23.8 4.8 36.4 37 25.4 70.3 42.5 60.3 66.9zM207.4 159.9c.9-44-37.9-42.2-78.6-40.3-21.7 1-38.9 1.9-45.5 13.9-11.4 20.9 5.9 92.9 23.2 101.2 9.8 4.7 73.4 7.9 86.3-7.1 8.2-9.4 15-49.4 14.6-67.7zm52 58.3c-4.3-12.4-6-30.1-15.3-32.7-2-.5-9-.5-11 0-10 2.8-10.8 22.1-17 37.2 15.4 0 19.3 9.7 23.7 9.7 4.3 0 6.3-11.3 19.6-14.2zm135.7-84.7c-6.6-12.1-24.8-12.9-46.5-13.9-40.2-1.9-78.2-3.8-77.3 40.3-.5 18.3 5 58.3 13.2 67.8 13 14.9 76.6 11.8 86.3 7.1 15.8-7.6 36.5-78.9 24.3-101.3z\"/></svg>`{=html}\n\n:::: box\n::: box-header\nWelcome to December! 2024 is coming to an end, and I cannot wait to see what 2025 has in store for us! As a reminder, each lesson is designed as a 5 - 10 minute virtual session conducted for EnCompass staff to expand their skills with data, and the means of learning is the R programming language. When I started learning R, I dove into Datacamp and played with the Gapminder dataset a lot. Then, one day I was asked to look at a dataset that I'd get by email. No problem, I thought. Then, the email arrived, and I looked at the .xlsx file on my screen. Hmmmm....How do I put this in my RStudio environment? I couldn't print it and feed it to it...I couldn't scan it....I could drop the file in....I was lost. I didn't understand how to import a file. I walked down the hall and asked a friend. I don't want you to experience this so consider this post your friend down the hall. Enjoy!\n:::\n::::\n\n# Learning objectives\n\nFor this session, the learning objective is to:\n\n- Import data from a .csv file and a .xlsx file\n\n- Write data to a .xlsx file\n\n# Wait, how does the data get into the Rstudio thingy?\n\nMost data that is used in the workplace comes in the form of a .csv file or a Excel file. If you're lucky, maybe you can import data directly from your company's database or you download reliable data from the internet using an API. The reality is that you'll probably get emails with Excel files attached so it's important to know how to access these.\n\n## Install and load packages\n\nIf you already have the packages below installed, then you don't need to install them again. I #'d the `install.packages()` lines so that the code doesn't run for me. You can delete the #'s if you need to install the packages.\n\nThen, activate the packages with the `library()` so they are active in your session.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# installing packages\n#install.packages(\"tidyverse\")\n#install.packages(\"readxl\")\n#install.packages(\"writexl\")\n#install.packages(\"here\")\n#install.packages(\"writexl\")\n\n# another option for installing packages\n#install.packages(c(\"tidyverse\", \"readxl\", \"writexl\", \"here\", \"writexl\"))\n\n\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(writexl)\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nhere() starts at C:/Users/brian/OneDrive/Documents/website\n```\n\n\n:::\n:::\n\n\n\n## Read in files\n\nPreviously our data was included in the gapminder package. You can find lots of training data sets in packages, and this is really useful, but it's not how you will get most of your data in the workplace. So, let's get to it.\n\n### CSV file\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read the data in and assign it to a variable\ndf_csv <- read_csv(here::here(\"posts/read file/testdata2.csv\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 20 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): location, type_visit, gender, v1, text_response\ndbl (4): respondentid, v2, lat, long\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n#check the data\n\ndplyr::glimpse(df_csv)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` pre\nRows: 20\nColumns: 9\n$ respondentid  <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1…\n$ location      <chr> \"Lubelskie\", \"Lubelskie\", \"Lubelskie\", \"Lubelskie\", \"Lub…\n$ type_visit    <chr> \"in person\", \"in person\", \"in person\", \"in person\", \"in …\n$ gender        <chr> \"M\", \"F\", \"M\", \"F\", \"F\", \"F\", \"M\", \"M\", \"M\", \"F\", \"F\", \"…\n$ v1            <chr> \"yes\", \"no\", \"yes\", \"no\", \"yes\", \"no\", \"yes\", \"yes\", \"no…\n$ v2            <dbl> 1, 5, 6, 2, 7, 1, 3, 3, 5, 7, 8, 9, 4, 2, 3, 1, 6, 4, 2,…\n$ text_response <chr> \"I liked the service.\", \"I did not like the service.\", \"…\n$ lat           <dbl> 51.01707, 51.27283, 50.92471, 50.35257, 51.50020, 51.745…\n$ long          <dbl> 23.12068, 23.53005, 23.57209, 23.03679, 23.24230, 21.981…\n```\n\n\n:::\n:::\n\n\nSuccess!\n\n### Excel file\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read the data in and assign it to a variable\ndf_xlsx <- read_xlsx(here::here(\"posts/read file/testdata2.xlsx\"))\n\n#check the data\n\ndplyr::glimpse(df_xlsx)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` pre\nRows: 20\nColumns: 9\n$ respondentid  <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1…\n$ location      <chr> \"Lubelskie\", \"Lubelskie\", \"Lubelskie\", \"Lubelskie\", \"Lub…\n$ type_visit    <chr> \"in person\", \"in person\", \"in person\", \"in person\", \"in …\n$ gender        <chr> \"M\", \"F\", \"M\", \"F\", \"F\", \"F\", \"M\", \"M\", \"M\", \"F\", \"F\", \"…\n$ v1            <chr> \"yes\", \"no\", \"yes\", \"no\", \"yes\", \"no\", \"yes\", \"yes\", \"no…\n$ v2            <dbl> 1, 5, 6, 2, 7, 1, 3, 3, 5, 7, 8, 9, 4, 2, 3, 1, 6, 4, 2,…\n$ text_response <chr> \"I liked the service.\", \"I did not like the service.\", \"…\n$ lat           <dbl> 51.01707, 51.27283, 50.92471, 50.35257, 51.50020, 51.745…\n$ long          <dbl> 23.12068, 23.53005, 23.57209, 23.03679, 23.24230, 21.981…\n```\n\n\n:::\n:::\n\n\nSuccess!\n\n## Mutate the dataset\n\nWe can see that both datasets are identical with 20 rows (observations) across 9 columns. So, pick either one and we'll add a variable called income using the `mutate()` function. This will add a column, and we will save it under as a new object that we will write back to an Excel file so we can email to our colleague.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add a new variable to the dataset\ndf_add <- df_xlsx |> #pipe df to the mutate function\n  dplyr::mutate(income = sample(1000:7500, 20))\n\n#view first 6 rows\n\nhead(df_add)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` pre\n# A tibble: 6 × 10\n  respondentid location  type_visit gender v1       v2 text_response   lat  long\n         <dbl> <chr>     <chr>      <chr>  <chr> <dbl> <chr>         <dbl> <dbl>\n1            1 Lubelskie in person  M      yes       1 I liked the …  51.0  23.1\n2            2 Lubelskie in person  F      no        5 I did not li…  51.3  23.5\n3            3 Lubelskie in person  M      yes       6 The service …  50.9  23.6\n4            4 Lubelskie in person  F      no        2 Amazing        50.4  23.0\n5            5 Lubelskie in person  F      yes       7 Poor           51.5  23.2\n6            6 Lubelskie remote     F      no        1 Some great t…  51.7  22.0\n# ℹ 1 more variable: income <int>\n```\n\n\n:::\n\n```{.r .cell-code}\n#view last 6 rows\ntail(df_add)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` pre\n# A tibble: 6 × 10\n  respondentid location type_visit gender v1       v2 text_response    lat  long\n         <dbl> <chr>    <chr>      <chr>  <chr> <dbl> <chr>          <dbl> <dbl>\n1           15 Opolskie remote     M      no        3 I would have …  50.5  17.6\n2           16 Opolskie remote     F      no        1 Yes, the team…  50.8  18.4\n3           17 Opolskie remote     F      no        6 I didn't appr…  50.5  17.7\n4           18 Opolskie telephone  F      yes       4 More support …  50.8  17.3\n5           19 Opolskie telephone  M      no        2 I was told th…  51.0  18.5\n6           20 Opolskie telephone  M      yes       2 I forgot my I…  50.7  17.3\n# ℹ 1 more variable: income <int>\n```\n\n\n:::\n:::\n\n\n\nWe're using the basic manipulation skills that we saw with the Gapminder dataset in the previous lessons. \n\n## Write it to Excel or CSV\n\nHere all we need to do is specify the object and provide it a path where we want the file to be saved. You should write it to somewhere in your documents folder to avoid any issues with One Drive or Google Drive. N.B. with `write_csv()` path becomes file.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_xlsx(x = df_add, path = here::here(\"posts/read file/test_out.xlsx\"))\n\nwrite_csv(x = df_add, file = here::here(\"posts/read file/test_out.csv\"))\n```\n:::\n\n\n\nNow you can email this updated .xlsx/.csv file to your colleague. :)\n\n\n## Have fun!\n\nNow it's your turn practice! Below is a fully functioning code editor with starting code in place. Feel free to experiment with different grouping variables in the `group_by()` call or to adjust the summary statistic in `summarize()`. Then, have fun with the plot!\n\n```{webr-r}\n\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(writexl)\nlibrary(here)\n\ndf <- read_xlsx(here::here(\"posts/read file/testdata2.xlsx\"))\n\n\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}