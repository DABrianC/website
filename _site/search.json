[
  {
    "objectID": "posts/lineplot/lesson2_lineplot.html",
    "href": "posts/lineplot/lesson2_lineplot.html",
    "title": "Humans Learning",
    "section": "",
    "text": "Welcome to the second iteration of the Humans Learning lessons. As a reminder, each lesson is designed as a 5 - 10 minute virtual session conducted for EnCompass staff to expand their skills with data, and the means of learning is the R programming language. Each lesson will have learning objectives, some example code and explanation to demonstrate a technique or skill, and an open code chunk at the end for you to have some fun. Each lesson is then captured in an html file for online access. This is all in the service of humans learning. Enjoy!"
  },
  {
    "objectID": "posts/lineplot/lesson2_lineplot.html#install-and-load-packages",
    "href": "posts/lineplot/lesson2_lineplot.html#install-and-load-packages",
    "title": "Humans Learning",
    "section": "Install and load packages",
    "text": "Install and load packages\nIn your R script, you will use the install.packages() and library() functions to install and load the two packages Tidyverse and Gapminder.\nTidyverse provides a suite of compatible data wrangling and visualization tools. The workhorse of data visualization is the ggplot2 package. With ggplot2 the sky is the limit! From basic bar plots to animated graphics to interactive charts and tables connected by a common data source, ggplot2 and its extension packages can do it all. And once again, Gapminder provides a dataset extracted from the global trend data maintained by, https://www.gapminder.org/.\n\n#Installs the package on your system.\ninstall.packages(c(\"tidyverse\", \"gapminder\"), repos = \"https://cloud.r-project.org/\")\n\npackage 'tidyverse' successfully unpacked and MD5 sums checked\npackage 'gapminder' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\brian\\AppData\\Local\\Temp\\RtmpmCWCHC\\downloaded_packages\n\n#load the libraries so you can use them\nlibrary(tidyverse)\nlibrary(gapminder)"
  },
  {
    "objectID": "posts/lineplot/lesson2_lineplot.html#view-the-data",
    "href": "posts/lineplot/lesson2_lineplot.html#view-the-data",
    "title": "Humans Learning",
    "section": "View the data",
    "text": "View the data\nJust as in the first session, the first step is to view the data. To look at just the first six rows so you can see the variable names and structure of the data pass gapminder to head() as in the code below.\n\n# assign gapminder to df \n# this is required, but it makes life easier\n# don't we all want life to be easier\n\ndf &lt;- gapminder\n\n# look at the gapminder dataset\nhead(df)\n\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\ntail(df)\n\n# A tibble: 6 × 6\n  country  continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;    &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Zimbabwe Africa     1982    60.4  7636524      789.\n2 Zimbabwe Africa     1987    62.4  9216418      706.\n3 Zimbabwe Africa     1992    60.4 10704340      693.\n4 Zimbabwe Africa     1997    46.8 11404948      792.\n5 Zimbabwe Africa     2002    40.0 11926563      672.\n6 Zimbabwe Africa     2007    43.5 12311143      470."
  },
  {
    "objectID": "posts/lineplot/lesson2_lineplot.html#make-a-line-plot",
    "href": "posts/lineplot/lesson2_lineplot.html#make-a-line-plot",
    "title": "Humans Learning",
    "section": "Make a line plot",
    "text": "Make a line plot\nAs fun as looking at data is, we probably want to do more. Since our objective is to make a line plot, we should do that next. The structure of ggplot requires that we pass it an object (df), the type of geom_* we want to make (in this case a line plot), and the aesthetics or the variables we want to plot.\n\n#make a plot\nggplot(data = df) +\n  geom_line(aes(x = year, y = gdpPercap, color = continent))\n\n\n\n\n\n\n\n\nYeeeeesh!! That did not work at all. Looks like we forgot to group_by() and summarize() to create summary statistics that would provide us a single datapoint to follow across the years.\nLet’s us df to create a new object, df1. df1 will group the data by continent and year and create a variable for the mean GDP per capita. This will provide a single data point for each continent, for each year so that we can make useful lines for the mean GDP per capita over time.\n\n#| class-output: pre\n\n\ndf1 &lt;- df |&gt; \n  group_by(continent, year) |&gt; \n  summarize(avg_gdpPercap = mean(gdpPercap))\n\nNow we just have to remember the how ggplot works and make our line plot. It takes three components.\n\nThe data object, df1\nThe geom, geom_line()\nThe aesthetics, year (x-axis), avg_gdpPercap (y-axis), and continent (color).\n\n\n#| class-output: pre\n\n\nggplot(df1) +\n  geom_line(aes(x = year, y = avg_gdpPercap, color = continent))"
  },
  {
    "objectID": "posts/lineplot/lesson2_lineplot.html#have-fun",
    "href": "posts/lineplot/lesson2_lineplot.html#have-fun",
    "title": "Humans Learning",
    "section": "Have fun!",
    "text": "Have fun!\nNow it’s your turn practice! Below is a fully functioning code editor with starting code in place. Feel free to experiment with different grouping variables in the group_by() call or to adjust the summary statistic in summarize(). Then, have fun with the plot!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "posts/facet plot/lesson3_ggplot-facets.html",
    "href": "posts/facet plot/lesson3_ggplot-facets.html",
    "title": "Humans Learning",
    "section": "",
    "text": "Greetings and welcome to the third iteration of Humans Learning. As a reminder, each lesson is designed as a 5 - 10 minute virtual session conducted for EnCompass staff to expand their skills with data, and the means of learning is the R programming language. Each lesson will have learning objectives, some example code and explanation to demonstrate a technique or skill, and an open code chunk at the end for you to have some fun. This is all in the service of humans learning. Enjoy!"
  },
  {
    "objectID": "posts/facet plot/lesson3_ggplot-facets.html#install-and-load-packages",
    "href": "posts/facet plot/lesson3_ggplot-facets.html#install-and-load-packages",
    "title": "Humans Learning",
    "section": "Install and load packages",
    "text": "Install and load packages\nIn your R script, you will use the install.packages() and library() functions to install and load the two packages Tidyverse and Gapminder.\nTidyverse provides a suite of compatible data wrangling and visualization tools. The workhorse of data visualization is the ggplot2 package. With ggplot2 the sky is the limit! From basic bar plots to animated graphics to interactive charts and tables connected by a common data source, ggplot2 and its extension packages can do it all. And once again, Gapminder provides a dataset extracted from the global trend data maintained by, https://www.gapminder.org/.\n\n#Installs the package on your system.\ninstall.packages(c(\"tidyverse\", \"gapminder\"))\n\npackage 'tidyverse' successfully unpacked and MD5 sums checked\npackage 'gapminder' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\brian\\AppData\\Local\\Temp\\RtmpOAdicM\\downloaded_packages\n\n#load the libraries so you can use them\nlibrary(tidyverse)\nlibrary(gapminder)"
  },
  {
    "objectID": "posts/facet plot/lesson3_ggplot-facets.html#set-up-the-data",
    "href": "posts/facet plot/lesson3_ggplot-facets.html#set-up-the-data",
    "title": "Humans Learning",
    "section": "Set up the data",
    "text": "Set up the data\nSimilar to before, we need to ensure we have the data and that it’s in a format that we can use. To look at just the first six rows so you can see the variable names and structure of the data pass gapminder to head() as in the code below.\n\n# assign gapminder to df \n# this is required, but it makes life easier\n# don't we all want life to be easier\n\ndf &lt;- gapminder\n\n# look at the gapminder dataset\nhead(df)\n\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\ntail(df)\n\n# A tibble: 6 × 6\n  country  continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;    &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Zimbabwe Africa     1982    60.4  7636524      789.\n2 Zimbabwe Africa     1987    62.4  9216418      706.\n3 Zimbabwe Africa     1992    60.4 10704340      693.\n4 Zimbabwe Africa     1997    46.8 11404948      792.\n5 Zimbabwe Africa     2002    40.0 11926563      672.\n6 Zimbabwe Africa     2007    43.5 12311143      470.\n\n\nIt looks pretty clean and tidy. We’ll explore some additional options for looking at data sets in the coming weeks."
  },
  {
    "objectID": "posts/facet plot/lesson3_ggplot-facets.html#make-a-facetted-plot",
    "href": "posts/facet plot/lesson3_ggplot-facets.html#make-a-facetted-plot",
    "title": "Humans Learning",
    "section": "Make a facetted plot",
    "text": "Make a facetted plot\nWe’ve used ggplot2 in the previous lessons so this will seem quite familiar. The structure of ggplot requires that we pass it an object (df), the type of geom_* we want to make (in this case a line plot), and the aesthetics (the variables we want to plot).\nWe can start with the plot from lesson two and assign it to the object, plot.\n\n#set up the data like last time\ndf1 &lt;- df |&gt; \n  group_by(continent, year) |&gt; \n  summarize(avg_gdpPercap = mean(gdpPercap))\n\n#make a plot\nplot &lt;- ggplot(df1) +\n  geom_line(aes(x = year, y = avg_gdpPercap, color = continent)) + labs(title = \"Avg. GDP per Capita, by Continent\", x = \"Year\", y = \"$ (USD)\")\n\nThat gives us the same line plot as last session.\nFacetting will separate each of this lines into their own plot panel. You can imagine that if you have lots of data on a single plot, it is easier to see if you can separate visualizations by one of the discrete variables.\nBelow, the data is separated by continent. Note that the axes across each plot panel are the same which allows for comparison. This is a default of the facet_wrap() function. There are cases where you would want to set this feature to false, but in most cases it allows for obvious comparisons across the data.\n\n#| class-output: pre\n\n\nplot +\n  facet_wrap(facets = df1$continent)\n\n\n\n\n\n\n\n\nHere’s another example that takes the data for one continent and facets it by country.\nFirst, we do a little data wrangling. Then, we plot.\n\n#| class-output: pre\n\n#Filter\ndf2 &lt;- df |&gt; \n  filter(continent == \"Americas\") |&gt;\n  group_by(country, year) |&gt; \n  summarize(avg_gdpPercap = mean(gdpPercap))\n\n\nStandard PlotFacetted Plot\n\n\n\n#| class-output: pre\n\nplot_amer &lt;- ggplot(df2) +\n  geom_line(aes(x = year, y = avg_gdpPercap, color = country)) +\n  labs(title = \"Standard Plot\", y = \"$ (USD)\", x = \"Year\") +\n  theme(legend.position = \"none\")\n\nplot_amer\n\n\n\n\n\n\n\n\n\n\n\nplot_amer + \n  facet_wrap(facets = df2$country) +\n  labs(title = \"Facetted Plot\", y = \"$ (USD)\", x = \"Year\") +\n  theme(legend.position = \"none\"\n        , axis.text.x = element_text(angle = 45, vjust = .5, hjust = 1))"
  },
  {
    "objectID": "posts/facet plot/lesson3_ggplot-facets.html#have-fun",
    "href": "posts/facet plot/lesson3_ggplot-facets.html#have-fun",
    "title": "Humans Learning",
    "section": "Have fun!",
    "text": "Have fun!\nNow it’s your turn practice! Below is a fully functioning code editor with starting code in place. Feel free to experiment with different grouping variables in the group_by() call or to adjust the summary statistic in summarize(). Then, have fun with the plot!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Humans Learning",
    "section": "",
    "text": "Humans Learning was founded in late 2024 as an internal learning initiative for staff at EnCompass to strengthen the basics of data analysis with the R programming language. These were initially in-person or remote live sessions that I then put on a Github page. They are made up primarily of short – 5 minute-ish – lessons that focus on a single skill that I found useful to learn in my R journey. EnCompass closed in early 2025, but I didn’t want Humans Learning to end as there is still much to learn so I created this public site where it will live on. Now it is for anyone who is curious about data analytics and coding. There is no reason that it should only exist in R so I will add similar content in Python (or Julia) in the future. In addition, there will be more in depth dives into topics of interest to me. These will include Bayesian statistics, machine learning, LLMs, Quarto, and many other topics. To stay up to date on happenings in R, check out R-bloggers.\nI hope you enjoy the posts below.\n\n\n\n\n\n\n\n\n\n\n\n\n\nHumans Learning\n\n\nHow to make a map in R\n\n\n\ntrue\n\n\nR\n\n\nrspatial\n\n\nmap\n\n\n\n\n\n\n\n\n\nSep 23, 2025\n\n\nBrian Calhoon\n\n\n\n\n\n\n\n\n\n\n\n\nHumans Learning\n\n\nReshaping data from wide to longer\n\n\n\ntrue\n\n\nR\n\n\ndata\n\n\ntidyr\n\n\npivot\n\n\n\n\n\n\n\n\n\nDec 12, 2024\n\n\nBrian Calhoon\n\n\n\n\n\n\n\n\n\n\n\n\nHumans Learning\n\n\nReading data from other sources\n\n\n\ntrue\n\n\nR\n\n\ndata\n\n\nreadr\n\n\nreadxl\n\n\n\n\n\n\n\n\n\nDec 6, 2024\n\n\nBrian Calhoon\n\n\n\n\n\n\n\n\n\n\n\n\nHumans Learning\n\n\nFaceting plots using ggplot\n\n\n\ntrue\n\n\nR\n\n\nggplot\n\n\nfacets\n\n\n\n\n\n\n\n\n\nNov 22, 2024\n\n\nBrian Calhoon\n\n\n\n\n\n\n\n\n\n\n\n\nSentiment Analysis: Llama Llama\n\n\nComparing Llama sentiment analysis with two sentiment lexicons\n\n\n\ntrue\n\n\nR\n\n\nllama\n\n\nsentiments\n\n\n\n\n\n\n\n\n\nNov 8, 2024\n\n\nBrian Calhoon\n\n\n\n\n\n\n\n\n\n\n\n\nHumans Learning\n\n\nGetting started in R with Gapminder\n\n\n\ntrue\n\n\nR\n\n\nggplot\n\n\nstart\n\n\n\n\n\n\n\n\n\nNov 1, 2024\n\n\nBrian Calhoon\n\n\n\n\n\n\n\n\n\n\n\n\nHumans Learning\n\n\nMaking a line plot with ggplot\n\n\n\ntrue\n\n\nR\n\n\nggplot\n\n\nlines\n\n\n\n\n\n\n\n\n\nNov 11, 2014\n\n\nBrian Calhoon\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Hi, I’m Brian Calhoon. Welcome to my website. I enjoy playing with data in R and increasingly in Python, too. I have an interest in data visualization, GIS, analyzing big data, Bayesian statistics, and natural language processing. I generally enjoy learning about the nitty gritty of how inputs from real life work their way through a data pipeline and end up in front of key stakeholders whether that’s in a report, blog, website, or presentation.\nIf you are new to code-based data analysis and looking for some short examples to play with I encourage you to check out the Humans Learning section of this website where I share code with explanations targeting a general audience and those with an interest in learning to code."
  },
  {
    "objectID": "index.html#bio",
    "href": "index.html#bio",
    "title": "Welcome",
    "section": "Bio",
    "text": "Bio\nI’m a data scientist with 15 years of experience implementing, monitoring, evaluating, and assessing international development projects. I have worked with the U.S. Agency for International Development, the U.S. Department of State, the U.S. Department of Defense, and private foundations. My experience includes working on projects in Haiti, Niger, Burkina Faso, Senegal, and Ukraine. My work has focused on anti-corruption, capacity building, conflict, and generally helping others be more efficient. When I’m not working, I also enjoy making sourdough bread and pizza, skiing, and mixed martial arts."
  },
  {
    "objectID": "index.html#work-with-me",
    "href": "index.html#work-with-me",
    "title": "Welcome",
    "section": "Work with me",
    "text": "Work with me\nIf you have a need for a data analyst/scientist, I’m available for short- or long-term consulting assignments. You can contact me to set up a time to discuss your project or talk about sourdough."
  },
  {
    "objectID": "posts/first plot/lesson1_gapminder.html",
    "href": "posts/first plot/lesson1_gapminder.html",
    "title": "Humans Learning",
    "section": "",
    "text": "Welcome to the first iteration of the Humans Learning lessons. If you are here then you are interested in learning something about data analysis through code. Each lesson is designed as a 5 - 10 minute virtual session conducted for EnCompass staff to expand their skills with data, and the means of learning is the R programming language. Each lesson will have learning objectives, some example code and explanation to demonstrate a technique or skill, and an open code chunk at the end for you to have some fun. Each lesson is captured in an html file for online access. This is all in the service of humans learning. Enjoy!"
  },
  {
    "objectID": "posts/first plot/lesson1_gapminder.html#install-and-load-packages",
    "href": "posts/first plot/lesson1_gapminder.html#install-and-load-packages",
    "title": "Humans Learning",
    "section": "Install and load packages",
    "text": "Install and load packages\nIn your R script, you will use the install.packages() and library() functions to install and load the two packages Tidyverse and Gapminder.\nTidyverse provides a suite of compatible data wrangling and visualization tools. Gapminder provides a dataset extracted from the global trend data maintained by, https://www.gapminder.org/.\n\n#Installs the package on your system.\n#install.packages(c(\"tidyverse\", \"gapminder\"))\n\n#load the libraries so you can use them\nlibrary(tidyverse)\nlibrary(gapminder)"
  },
  {
    "objectID": "posts/first plot/lesson1_gapminder.html#view-the-data",
    "href": "posts/first plot/lesson1_gapminder.html#view-the-data",
    "title": "Humans Learning",
    "section": "View the data",
    "text": "View the data\nNow that you have completed the first step it is time to view the data. To look at just the first six rows so you can see the variable names and structure of the data pass gapminder to head() as in the code below.\n\n#look at the gapminder dataset\nhead(gapminder)\n\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\n\nTo make it even easier to work with, you can assign gapminder to the object df. Now you only have to type df to see it. You can view only the variable names by passing df to names().\n\n#make gapminder an object\ndf &lt;- gapminder\n\n#read variable names\nnames(df)\n\n[1] \"country\"   \"continent\" \"year\"      \"lifeExp\"   \"pop\"       \"gdpPercap\""
  },
  {
    "objectID": "posts/first plot/lesson1_gapminder.html#make-a-plot",
    "href": "posts/first plot/lesson1_gapminder.html#make-a-plot",
    "title": "Humans Learning",
    "section": "Make a plot",
    "text": "Make a plot\nAs fun as looking at data is, we probably want to do more. So, we should make our first plot using ggplot(). The structure of ggplot requires that we pass it an object (df), the type of geom_* we want to make (in this case a scatterplot), and the aesthetics or the variables we want to plot. The code below provides a first plot.\nThen we make the plot an object.\n\n#make a plot\nggplot(data = df) +\n  geom_point(aes(x = gdpPercap, y = lifeExp, color = continent)\n             , alpha = .4) \n\n\n\n\n\n\n\n#make the plot an object\nplot &lt;- ggplot(data = df) +\n  geom_point(aes(x = gdpPercap, y = lifeExp, color =  continent)\n             , alpha = .4) \n\nThis next plot does a little more by adding to the plot object. We rescaled the data to correct for some outliers and we added a smoothing line to help readers interpret the trend easily.\n\n#use the object to add more things to the plot\nplot +  \n  \n  #rescale data\n  scale_x_log10() + \n  \n  #add a smoothing line\n  geom_smooth(aes(x = gdpPercap, y = lifeExp))"
  },
  {
    "objectID": "posts/first plot/lesson1_gapminder.html#have-fun",
    "href": "posts/first plot/lesson1_gapminder.html#have-fun",
    "title": "Humans Learning",
    "section": "Have fun!",
    "text": "Have fun!\nNow it’s your turn practice! Below is a fully functioning code editor with starting code in place. Try changing the variables or changing the type of chart from a scatter plot (geom_point()) to a line graph (geom_line()) or a bar graph (geom_col() or geom_bar()).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "posts/read file/read_file.html",
    "href": "posts/read file/read_file.html",
    "title": "Humans Learning",
    "section": "",
    "text": "Welcome to December! 2024 is coming to an end, and I cannot wait to see what 2025 has in store for us! As a reminder, each lesson is designed as a 5 - 10 minute virtual session conducted for EnCompass staff to expand their skills with data, and the means of learning is the R programming language. When I started learning R, I dove into Datacamp and played with the Gapminder dataset a lot. Then, one day I was asked to look at a dataset that I received over email. No problem, I thought. . Hmmmm…This data is not magically already here…How do I put this in my RStudio environment? I couldn’t print it and feed it to it…I couldn’t scan it….Could I drop the file in?….I was lost. I didn’t understand how to import a file. I walked down the hall and asked a friend and 30 seconds later life was good. I don’t want you to go through this so consider this post your friend down the hall. Enjoy!"
  },
  {
    "objectID": "posts/read file/read_file.html#install-and-load-packages",
    "href": "posts/read file/read_file.html#install-and-load-packages",
    "title": "Humans Learning",
    "section": "Install and load packages",
    "text": "Install and load packages\nIf you already have the packages below installed, then you don’t need to install them again. I #’d the install.packages() lines so that the code doesn’t run for me. You can delete the #’s if you need to install the packages.\nThen, activate the packages with the library() so they are active in your session.\n\n# installing packages\n#install.packages(\"tidyverse\")\n#install.packages(\"readxl\")\n#install.packages(\"writexl\")\n#install.packages(\"here\")\n#install.packages(\"writexl\")\n\n# another option for installing packages\n#install.packages(c(\"tidyverse\", \"readxl\", \"writexl\", \"here\", \"writexl\"))\n\n\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(writexl)\nlibrary(here)"
  },
  {
    "objectID": "posts/read file/read_file.html#read-in-files",
    "href": "posts/read file/read_file.html#read-in-files",
    "title": "Humans Learning",
    "section": "Read in files",
    "text": "Read in files\nPreviously our data was included in the gapminder package. You can find lots of training data sets in packages, and this is really useful, but it’s not how you will get most of your data in the workplace. So, let’s get to it.\n\nCSV file\n\n# read the data in and assign it to a variable\ndf_csv &lt;- read_csv(here::here(\"posts/read file/testdata2.csv\"))\n\n#check the data\n\ndplyr::glimpse(df_csv)\n\nRows: 20\nColumns: 9\n$ respondentid  &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1…\n$ location      &lt;chr&gt; \"Lubelskie\", \"Lubelskie\", \"Lubelskie\", \"Lubelskie\", \"Lub…\n$ type_visit    &lt;chr&gt; \"in person\", \"in person\", \"in person\", \"in person\", \"in …\n$ gender        &lt;chr&gt; \"M\", \"F\", \"M\", \"F\", \"F\", \"F\", \"M\", \"M\", \"M\", \"F\", \"F\", \"…\n$ v1            &lt;chr&gt; \"yes\", \"no\", \"yes\", \"no\", \"yes\", \"no\", \"yes\", \"yes\", \"no…\n$ v2            &lt;dbl&gt; 1, 5, 6, 2, 7, 1, 3, 3, 5, 7, 8, 9, 4, 2, 3, 1, 6, 4, 2,…\n$ text_response &lt;chr&gt; \"I liked the service.\", \"I did not like the service.\", \"…\n$ lat           &lt;dbl&gt; 51.01707, 51.27283, 50.92471, 50.35257, 51.50020, 51.745…\n$ long          &lt;dbl&gt; 23.12068, 23.53005, 23.57209, 23.03679, 23.24230, 21.981…\n\n\nSuccess!\n\n\nExcel file\n\n# read the data in and assign it to a variable\ndf_xlsx &lt;- read_xlsx(here::here(\"posts/read file/testdata2.xlsx\"))\n\n#check the data\n\ndplyr::glimpse(df_xlsx)\n\nRows: 20\nColumns: 9\n$ respondentid  &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1…\n$ location      &lt;chr&gt; \"Lubelskie\", \"Lubelskie\", \"Lubelskie\", \"Lubelskie\", \"Lub…\n$ type_visit    &lt;chr&gt; \"in person\", \"in person\", \"in person\", \"in person\", \"in …\n$ gender        &lt;chr&gt; \"M\", \"F\", \"M\", \"F\", \"F\", \"F\", \"M\", \"M\", \"M\", \"F\", \"F\", \"…\n$ v1            &lt;chr&gt; \"yes\", \"no\", \"yes\", \"no\", \"yes\", \"no\", \"yes\", \"yes\", \"no…\n$ v2            &lt;dbl&gt; 1, 5, 6, 2, 7, 1, 3, 3, 5, 7, 8, 9, 4, 2, 3, 1, 6, 4, 2,…\n$ text_response &lt;chr&gt; \"I liked the service.\", \"I did not like the service.\", \"…\n$ lat           &lt;dbl&gt; 51.01707, 51.27283, 50.92471, 50.35257, 51.50020, 51.745…\n$ long          &lt;dbl&gt; 23.12068, 23.53005, 23.57209, 23.03679, 23.24230, 21.981…\n\n\nSuccess!"
  },
  {
    "objectID": "posts/read file/read_file.html#view-the-data",
    "href": "posts/read file/read_file.html#view-the-data",
    "title": "Humans Learning",
    "section": "View the data",
    "text": "View the data\nJust as in the first session, the first step is to view the data. To look at just the first six rows so you can see the variable names and structure of the data pass gapminder to head() as in the code below.\n\n# assign gapminder to df \n# this is required, but it makes life easier\n# don't we all want life to be easier\n\ndf &lt;- gapminder\n\n# look at the gapminder dataset\nhead(df)\n\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\ntail(df)\n\n# A tibble: 6 × 6\n  country  continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;    &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Zimbabwe Africa     1982    60.4  7636524      789.\n2 Zimbabwe Africa     1987    62.4  9216418      706.\n3 Zimbabwe Africa     1992    60.4 10704340      693.\n4 Zimbabwe Africa     1997    46.8 11404948      792.\n5 Zimbabwe Africa     2002    40.0 11926563      672.\n6 Zimbabwe Africa     2007    43.5 12311143      470."
  },
  {
    "objectID": "posts/read file/read_file.html#make-a-line-plot",
    "href": "posts/read file/read_file.html#make-a-line-plot",
    "title": "Humans Learning",
    "section": "Make a line plot",
    "text": "Make a line plot\nAs fun as looking at data is, we probably want to do more. Since our objective is to make a line plot, we should do that next. The structure of ggplot requires that we pass it an object (df), the type of geom_* we want to make (in this case a line plot), and the aesthetics or the variables we want to plot.\n\n#make a plot\nggplot(data = df) +\n  geom_line(aes(x = year, y = gdpPercap, color = continent))\n\n\n\n\n\n\n\n\nYeeeeesh!! That did not work at all. Looks like we forgot to group_by() and summarize() to create summary statistics that would provide us a single datapoint to follow across the years.\nLet’s us df to create a new object, df1. df1 will group the data by continent and year and create a variable for the mean GDP per capita. This will provide a single data point for each continent, for each year so that we can make useful lines for the mean GDP per capita over time.\n\n#| class-output: pre\n\n\ndf1 &lt;- df |&gt; \n  group_by(continent, year) |&gt; \n  summarize(avg_gdpPercap = mean(gdpPercap))\n\n`summarise()` has grouped output by 'continent'. You can override using the\n`.groups` argument.\n\n\nNow we just have to remember the how ggplot works and make our line plot. It takes three components.\n\nThe data object, df1\nThe geom, geom_line()\nThe aesthetics, year (x-axis), avg_gdpPercap (y-axis), and continent (color).\n\n\n#| class-output: pre\n\n\nggplot(df1) +\n  geom_line(aes(x = year, y = avg_gdpPercap, color = continent))"
  },
  {
    "objectID": "posts/read file/read_file.html#have-fun",
    "href": "posts/read file/read_file.html#have-fun",
    "title": "Humans Learning",
    "section": "Have fun!",
    "text": "Have fun!\nNow it’s your turn practice! Below is a fully functioning code editor with starting code in place. Feel free to experiment with different grouping variables in the group_by() call or to adjust the summary statistic in summarize(). Then, have fun with the plot!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "posts/read file/read_file.html#mutate-the-dataset",
    "href": "posts/read file/read_file.html#mutate-the-dataset",
    "title": "Humans Learning",
    "section": "Mutate the dataset",
    "text": "Mutate the dataset\nWe can see that both datasets are identical with 20 rows (observations) across 9 columns. So, pick either one and we’ll add a variable called income using the mutate() function. This will add a column, and we will save it under as a new object that we will write back to an Excel file so we can email to our colleague.\n\n# add a new variable to the dataset\ndf_add &lt;- df_xlsx |&gt; #pipe df to the mutate function\n  dplyr::mutate(income = sample(1000:7500, 20))\n\n#view first 6 rows\n\nhead(df_add)\n\n# A tibble: 6 × 10\n  respondentid location  type_visit gender v1       v2 text_response   lat  long\n         &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;      &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;dbl&gt;\n1            1 Lubelskie in person  M      yes       1 I liked the …  51.0  23.1\n2            2 Lubelskie in person  F      no        5 I did not li…  51.3  23.5\n3            3 Lubelskie in person  M      yes       6 The service …  50.9  23.6\n4            4 Lubelskie in person  F      no        2 Amazing        50.4  23.0\n5            5 Lubelskie in person  F      yes       7 Poor           51.5  23.2\n6            6 Lubelskie remote     F      no        1 Some great t…  51.7  22.0\n# ℹ 1 more variable: income &lt;int&gt;\n\n#view last 6 rows\ntail(df_add)\n\n# A tibble: 6 × 10\n  respondentid location type_visit gender v1       v2 text_response    lat  long\n         &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt; &lt;dbl&gt;\n1           15 Opolskie remote     M      no        3 I would have …  50.5  17.6\n2           16 Opolskie remote     F      no        1 Yes, the team…  50.8  18.4\n3           17 Opolskie remote     F      no        6 I didn't appr…  50.5  17.7\n4           18 Opolskie telephone  F      yes       4 More support …  50.8  17.3\n5           19 Opolskie telephone  M      no        2 I was told th…  51.0  18.5\n6           20 Opolskie telephone  M      yes       2 I forgot my I…  50.7  17.3\n# ℹ 1 more variable: income &lt;int&gt;\n\n\nWe’re using the basic manipulation skills that we saw with the Gapminder dataset in the previous lessons."
  },
  {
    "objectID": "posts/read file/read_file.html#write-it-to-excel-or-csv",
    "href": "posts/read file/read_file.html#write-it-to-excel-or-csv",
    "title": "Humans Learning",
    "section": "Write it to Excel or CSV",
    "text": "Write it to Excel or CSV\nHere all we need to do is specify the object and provide it a path where we want the file to be saved. You should write it to somewhere in your documents folder to avoid any issues with One Drive or Google Drive. N.B. with write_csv() path becomes file.\n\nwrite_xlsx(x = df_add, path = here::here(\"posts/read file/test_out.xlsx\"))\n\nwrite_csv(x = df_add, file = here::here(\"posts/read file/test_out.csv\"))\n\nNow you can email this updated .xlsx/.csv file to your colleague. :)"
  },
  {
    "objectID": "posts/pivot_longer/pivot_longer.html",
    "href": "posts/pivot_longer/pivot_longer.html",
    "title": "Humans Learning",
    "section": "",
    "text": "Welcome back! As a reminder, each lesson is designed as a 5 - 10 minute virtual session conducted for EnCompass staff to expand their skills with data, and the means of learning is the R programming language.\n\nUsefulness of pivoting data"
  },
  {
    "objectID": "posts/pivot_longer/pivot_longer.html#install-and-load-packages",
    "href": "posts/pivot_longer/pivot_longer.html#install-and-load-packages",
    "title": "Humans Learning",
    "section": "Install and load packages",
    "text": "Install and load packages\nIf you already have the packages below installed, then you don’t need to install them again. I #’d the install.packages() lines so that the code doesn’t run for me. You can delete the #’s if you need to install the packages.\nThen, activate the packages with the library() so they are active in your session.\n\n# installing packages\n#install.packages(\"tidyverse\")\n#install.packages(\"readxl\")\n#install.packages(\"writexl\")\n#install.packages(\"here\")\n#install.packages(\"writexl\")\n\n# another option for installing packages\n#install.packages(c(\"tidyverse\", \"readxl\", \"writexl\", \"here\", \"writexl\"))\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readxl)\nlibrary(writexl)\nlibrary(here)\n\nhere() starts at C:/Users/brian/OneDrive/Documents/website"
  },
  {
    "objectID": "posts/pivot_longer/pivot_longer.html#read-in-files",
    "href": "posts/pivot_longer/pivot_longer.html#read-in-files",
    "title": "Humans Learning",
    "section": "Read in files",
    "text": "Read in files\nPreviously our data was included in the gapminder package. You can find lots of training data sets in packages, and this is really useful, but it’s not how you will get most of your data in the workplace. So, let’s get to it.\n\nCSV file\n\n# read the data in and assign it to a variable\ndf_csv &lt;- read_csv(here::here(\"posts/read file/testdata2.csv\"))\n\nRows: 20 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): location, type_visit, gender, v1, text_response\ndbl (4): respondentid, v2, lat, long\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#check the data\n\ndplyr::glimpse(df_csv)\n\nRows: 20\nColumns: 9\n$ respondentid  &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1…\n$ location      &lt;chr&gt; \"Lubelskie\", \"Lubelskie\", \"Lubelskie\", \"Lubelskie\", \"Lub…\n$ type_visit    &lt;chr&gt; \"in person\", \"in person\", \"in person\", \"in person\", \"in …\n$ gender        &lt;chr&gt; \"M\", \"F\", \"M\", \"F\", \"F\", \"F\", \"M\", \"M\", \"M\", \"F\", \"F\", \"…\n$ v1            &lt;chr&gt; \"yes\", \"no\", \"yes\", \"no\", \"yes\", \"no\", \"yes\", \"yes\", \"no…\n$ v2            &lt;dbl&gt; 1, 5, 6, 2, 7, 1, 3, 3, 5, 7, 8, 9, 4, 2, 3, 1, 6, 4, 2,…\n$ text_response &lt;chr&gt; \"I liked the service.\", \"I did not like the service.\", \"…\n$ lat           &lt;dbl&gt; 51.01707, 51.27283, 50.92471, 50.35257, 51.50020, 51.745…\n$ long          &lt;dbl&gt; 23.12068, 23.53005, 23.57209, 23.03679, 23.24230, 21.981…\n\n\nSuccess!\n\n\nExcel file\n\n# read the data in and assign it to a variable\n#df_xlsx &lt;- read_xlsx(here::here(\"posts/read file/testdata2.xlsx\"))\n\n#check the data\n\n#dplyr::glimpse(df_xlsx)\n\nSuccess!"
  },
  {
    "objectID": "posts/pivot_longer/pivot_longer.html#mutate-the-dataset",
    "href": "posts/pivot_longer/pivot_longer.html#mutate-the-dataset",
    "title": "Humans Learning",
    "section": "Mutate the dataset",
    "text": "Mutate the dataset\nWe can see that both datasets are identical with 20 rows (observations) across 9 columns. So, pick either one and we’ll add a variable called income using the mutate() function. This will add a column, and we will save it under as a new object that we will write back to an Excel file so we can email to our colleague.\n\n# add a new variable to the dataset\n#df_add &lt;- df_xlsx |&gt; #pipe df to the mutate function\n # dplyr::mutate(income = sample(1000:7500, 20))\n\n#view first 6 rows\n\n#head(df_add)\n\n#view last 6 rows\n#tail(df_add)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "posts/pivot_longer/pivot_longer.html#indeed-this-data-is-wide",
    "href": "posts/pivot_longer/pivot_longer.html#indeed-this-data-is-wide",
    "title": "Humans Learning",
    "section": "Indeed, this data is Wide",
    "text": "Indeed, this data is Wide\nWe’ve got five columns of data for a respondent’s favorite color, and for some reason person F selected 3 colors. Here are a few more observations.\n\nThe column with the question just holds the question variable and is blank.\nThe majority of rows in these columns are also blank.\nA single variable - favorite color - is spread out over a bunch of columns.\n\nTo simplify this, let’s put these all in a single column."
  },
  {
    "objectID": "posts/pivot_longer/pivot_longer.html#reshaping",
    "href": "posts/pivot_longer/pivot_longer.html#reshaping",
    "title": "Humans Learning",
    "section": "Reshaping",
    "text": "Reshaping\nWe’ll create a new object called df1. This maintains our original df object in case we still have a need for the original object. Then, let’s eliminate the 2nd column that is all blanks. Next, pivot the columns with the 1s in a single column, and change the 1s to the name of each color. Finally, we should put pivotted data in a column with a name that is clear and useful for coding – fav_color. Here’s the code to do this.\n\ndf1 &lt;- df |&gt; \n  select(-2) |&gt;  #eliminates the 2nd column\n  pivot_longer(cols = 2:5, #use these columns for the transformation\n               names_to = \"fav_color\", #Name the column where the the color names are stored\n               values_drop_na = TRUE) |&gt;  #remove the rows with missing data\n  select(-3) # remove the 1s since they no longer matter\n\nknitr::kable(df1) \n\n\n\n\nResp\nfav_color\n\n\n\n\nA\nblue\n\n\nB\nred\n\n\nC\ngreen\n\n\nD\npurple\n\n\nE\ngreen\n\n\nF\nblue\n\n\nF\nred\n\n\nF\npurple\n\n\nG\nblue\n\n\n\n\n\nSuccess! Within the pivot_longer() call, we told it to use columns 2 through 5 since we want to keep the Resp(ondents) column unchanged. We maintained the first column and added additional rows to account for the multiple colors selected by Resp F.\nNow we have two clean columns that display our data."
  },
  {
    "objectID": "posts/pivot_longer/pivot_longer.html#have-fun",
    "href": "posts/pivot_longer/pivot_longer.html#have-fun",
    "title": "Humans Learning",
    "section": "Have fun!",
    "text": "Have fun!\nNow it’s your turn practice! Below is a fully functioning code editor with starting code in place. Try pivoting data, and then feel free to make a bar chart using ggplot + geom_bar() (or geom_col()).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "posts/llama/llama sentiment classification.html",
    "href": "posts/llama/llama sentiment classification.html",
    "title": "Sentiment Analysis: Llama Llama",
    "section": "",
    "text": "It might be because you are curious about sentiment analysis. This demonstration will take an example dataframe that has a text field and compare the ability of Meta’s LLama 3.2, bing’s lexicon, and Loughran-McDonald’s lexicon at identifying positive and negative sentiments from short responses. This draws on the great work of Julia Silge and David Robinson Text Mining with R for the lexicon-based sentiment analysis. For the Llama part of the analysis, the ollama and mall R packages do the heavy lifting with mall providing the tidy functions that are used to interact with the data. Thanks for learning with me today. Enjoy!"
  },
  {
    "objectID": "posts/llama/llama sentiment classification.html#a-dataset",
    "href": "posts/llama/llama sentiment classification.html#a-dataset",
    "title": "Sentiment Analysis: Llama Llama",
    "section": "A dataset",
    "text": "A dataset\nHere’s a minimal dataset that allows us to confirm what is being done with a quick look. You can explore it in the table below. For our purposes we’re mainly interested in the column text_response.\n\ndf &lt;- readxl::read_xlsx(here::here(\"posts/llama/testdata2.xlsx\")) \n\ndf &lt;- df |&gt; \n  select(-location, -type_visit, -lat, -long)\n\nDT::datatable(df, class = 'cell-border stripe', option = list(pageLength = 5), filter = \"top\")"
  },
  {
    "objectID": "posts/llama/llama sentiment classification.html#sentiment-analysis-with-bing-and-loughran-mcdonald",
    "href": "posts/llama/llama sentiment classification.html#sentiment-analysis-with-bing-and-loughran-mcdonald",
    "title": "Sentiment Analysis: Llama Llama",
    "section": "Sentiment analysis with bing and Loughran-McDonald",
    "text": "Sentiment analysis with bing and Loughran-McDonald\n\nbing &lt;- tidytext::get_sentiments(lexicon = \"bing\")\n\n# Set option to skip interactive prompts\noptions(textdata_download_prompt = FALSE)\n\nloughran &lt;- textdata::lexicon_loughran()\n\nSentiment lexicons are basically lists of words that have been coded with a sentiment value (positive, negative, or a number score). The bing lexicon has 6786 words and the Loughran-McDonald has 4150 words. We can tokenize and identify the sentiment words and then quantify all positive words as 1 and negative words as -1 before computing an average sentiment score for each respondent. This table shows you which words bing identified and which words Loughran-McDonald identified. You can see how they identify different words and are not great lexicons for this particular task.\n\ndf_bing &lt;- df |&gt;\n  #dplyr::select(text_response) |&gt; \n  dplyr::mutate(respondent = row_number()) |&gt; \n  tidytext::unnest_tokens(word, text_response) |&gt; \n  dplyr::inner_join(bing) \n\ndf_loughran &lt;- df |&gt; \n  dplyr::mutate(respondent = row_number()) |&gt; \n  tidytext::unnest_tokens(word, text_response) |&gt; \n  dplyr::inner_join(loughran)\n\ndf_bing_loughran &lt;- df_bing |&gt; \n  dplyr::full_join(df_loughran, by = \"respondentid\") |&gt; \n  select(respondentid, bing_words = word.x, bing_sentiments = sentiment.x, loughran_words = word.y, loughran_sentiments = sentiment.y)\n\nDT::datatable(df_bing_loughran, class = 'cell-border stripe', option = list(pageLength = 5))\n\n\n\n\n\n\n# data wrangling to get the bing sentiments object\nbing_sents &lt;- df |&gt;\n  dplyr::select(text_response) |&gt; \n  dplyr::mutate(respondent = row_number()) |&gt; \n  tidytext::unnest_tokens(word, text_response) |&gt; \n  dplyr::inner_join(bing) |&gt; \n  dplyr::mutate(value = case_when(sentiment == \"positive\" ~ 1\n                               , sentiment == \"negative\" ~ -1)) |&gt; \n      dplyr::group_by(respondent) |&gt; \n      dplyr::summarize(score = mean(value))\n\n# data wrangling to get the Loughran-McDonald sentiments object\nloughran_sents &lt;- df |&gt;\n  dplyr::select(text_response) |&gt; \n  dplyr::mutate(respondent = row_number()) |&gt; \n  tidytext::unnest_tokens(word, text_response) |&gt; \n  dplyr::inner_join(loughran) |&gt; \n  dplyr::mutate(value = case_when(sentiment == \"positive\" ~ 1\n                               , sentiment == \"negative\" ~ -1)) |&gt; \n      dplyr::group_by(respondent) |&gt; \n      dplyr::summarize(score = mean(value))\n\nThen, we do a similar process using Llama, but we don’t have to take an average score because the LLM provides its own rating of positive, negative, or neutral for each respondent.\n\nmall::llm_use(\"ollama\", \"llama3.2\", seed = 100, .cache = \"_readme_cache\")\n\nllama_sents &lt;- df |&gt;\n  dplyr::select(text_response) |&gt; \n  dplyr::mutate(respondent = row_number()) |&gt; \n  mall::llm_sentiment(col = text_response, options = c(\"positive\",  \"negative\", \"neutral\")) |&gt; \n  dplyr::mutate(value = case_when(.sentiment == \"positive\" ~ 1\n                               , .sentiment == \"negative\" ~ -1\n                               , .sentiment == \"neutral\" ~ 0))"
  },
  {
    "objectID": "posts/llama/llama sentiment classification.html#visualizing-the-outputs",
    "href": "posts/llama/llama sentiment classification.html#visualizing-the-outputs",
    "title": "Sentiment Analysis: Llama Llama",
    "section": "Visualizing the outputs",
    "text": "Visualizing the outputs\nA simple comparison of each approach can be done with a density plot to show where the proportion of respondents fall on a negative to positive spectrum. Quickly looking at the data it is pretty clear that the Llama LLM more accurately categorizes the sentiment of each respondent. With this we could dive into the positive and negative responses to look for common topics or themes or see how they correlate with other independent variables.\n\nmarkdown_text &lt;- \"The &lt;span style = 'color:#00457C'&gt;&lt;b&gt;bing&lt;b&gt;&lt;/span&gt; and &lt;span style = 'color:#89C266;'&gt;&lt;b&gt;Loughran-McDonald&lt;b&gt;&lt;/span&gt; sentiment lexicons &lt;br&gt; miss the nuance of the language that the &lt;span style = 'color:#FF7C48;'&gt;&lt;b&gt;Llama&lt;b&gt;&lt;/span&gt; &lt;br&gt; sentiment analysis captures.\"\n\nggplot(bing_sents) +\n  geom_vline(xintercept = 0, lwd = 1.5, color = \"#7F7F7F\", fill = \"#7F7F7F\",  alpha = .2)+\n  geom_density(aes(score), color = \"#00457C\", lwd = 1.5) +\n  geom_density(data = loughran_sents, aes(score), color = \"#89C266\", fill = \"#89C266\", alpha = .2, lwd = 1.5) +\n  geom_density(data = llama_sents, aes(value), color = \"#FF7C48\", fill = \"#FF7C48\", alpha = .2, lwd = 1.5) +\n  geom_text(aes(x = .25, y = .5, label = \"Neutral\"), color = \"#7F7F7F\", vjust = .25, alpha = .3) +\n  geom_segment(aes(x = .03, xend = .16, y = .45, yend = .49), color = \"#7F7F7F\", alpha = .3)+\n  theme_minimal()+\n  labs(title = \"Comparison of sentiments with different methods\", \n    subtitle = markdown_text,\n    y = \"Propotion of responses\",\n    x = \"More negative                                     More positive\") +\n  theme(plot.title = element_text(size = 20, face = \"bold\", family = \"Corbel\"), \n    plot.subtitle = ggtext::element_markdown(size = 16, family = \"Corbel\"),\n    axis.title = element_text(family = \"Corbel\", size = 12),\n    plot.title.position = \"plot\"\n    , axis.text.x = element_blank())"
  },
  {
    "objectID": "posts/map/mapdemo.html",
    "href": "posts/map/mapdemo.html",
    "title": "Humans Learning",
    "section": "",
    "text": "Several years back, I was asked to show multiple variables on a map of the world. This is what started my R journey. I began exploring R functionality, and I stumbled through posts where authors did GIS in R. Then one day several years later, I found the amazing resource Geocomputation with R. With this I was able to explore all kinds of maps and some initial modeling. I was hooked! Would I have been better off starting with a more traditional stats focus and learning from R for Data Science? Definitely, but I wouldn’t have gotten lost in playing with data and making beautiful maps. The straightest path to a goal is one I rarely follow. So, here’s a quick introduction to making static and interactive maps in R."
  },
  {
    "objectID": "posts/map/mapdemo.html#important-packages-in-rspatial",
    "href": "posts/map/mapdemo.html#important-packages-in-rspatial",
    "title": "Humans Learning",
    "section": "Important packages in rspatial",
    "text": "Important packages in rspatial\nSimilar to QGIS, R provides an open-source interface for GIS. The most commonly used packages to handle spatial data are sf for vectors, terra for vectors and rasters, and raster for rasters.\nThe most commonly used packages for visualizing spatial data are ggplot2 - R’s most famous visualization package - and tmap which is designed specifically for visualizing spatial data. This demonstration will provide code for both packages.\nTo get started, we need to load our packages.\n\n#run this line first if you have never used these packages before\n#install.packages(c(\"tidyverse\", \"sf\", \"tmap\", \"readr\", \"here\", \"ggspatial\", \"ggrepel\"))\n\nlibrary(tidyverse) #install the core tidyverse packages including ggplot2\nlibrary(sf) #provides tools to work with vector data \nlibrary(tmap) #for visualizing spatial data\nlibrary(readr) #functions for reading external datasets \nlibrary(here) #to better locate files not in working directory\nlibrary(ggspatial) #for finishing touches on a map\nlibrary(ggrepel) #for repeling text in ggplot"
  },
  {
    "objectID": "posts/map/mapdemo.html#read-in-the-data",
    "href": "posts/map/mapdemo.html#read-in-the-data",
    "title": "Humans Learning",
    "section": "Read in the data",
    "text": "Read in the data\nFor this exercise, the data is already saved in the main project folder so I’ll read in the csv file with city names and locations, and then I’ll read in the administrative boundaries. You can also access the city data here and the administrative boundaries here.\n\n#It is a csv file so I use the read_csv function and provide the file path\ncities &lt;- read_csv(here::here(\"posts/map/Madagascar_Cities.csv\")\n                   , show_col_types = FALSE)\n\n#Observe the first few rows of data\nDT::datatable(head(cities))\n\n\n\n\n\nNow, for the administrative boundaries. Each of these are being read in using st_read() from the sf package. These are by default, spatial (sf) objects already.\n\nCountry boundaryRegional boundariesdistrict boundaries\n\n\n\n#This is only the country boundary\nmdg &lt;- st_read(here::here(\"posts/map/shapefiles/mdg_admbnda_adm0_BNGRC_OCHA_20181031.shp\"))\n\nReading layer `mdg_admbnda_adm0_BNGRC_OCHA_20181031' from data source \n  `C:\\Users\\brian\\OneDrive\\Documents\\website\\posts\\map\\shapefiles\\mdg_admbnda_adm0_BNGRC_OCHA_20181031.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1 feature and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 43.17692 ymin: -25.60575 xmax: 50.48485 ymax: -11.95139\nGeodetic CRS:  WGS 84\n\n\n\n\n\n#This is the administrative level below the whole country \nmdg1 &lt;- st_read(here::here(\"posts/map/shapefiles/mdg_admbnda_adm1_BNGRC_OCHA_20181031.shp\"))\n\nReading layer `mdg_admbnda_adm1_BNGRC_OCHA_20181031' from data source \n  `C:\\Users\\brian\\OneDrive\\Documents\\website\\posts\\map\\shapefiles\\mdg_admbnda_adm1_BNGRC_OCHA_20181031.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 22 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 43.17692 ymin: -25.60575 xmax: 50.48485 ymax: -11.95139\nGeodetic CRS:  WGS 84\n\n\n\n\n\n#This is the administrative level below the previous one\n# maybe these are districts\nmdg2 &lt;- st_read(here::here(\"posts/map/shapefiles/mdg_admbnda_adm2_BNGRC_OCHA_20181031.shp\"))\n\nReading layer `mdg_admbnda_adm2_BNGRC_OCHA_20181031' from data source \n  `C:\\Users\\brian\\OneDrive\\Documents\\website\\posts\\map\\shapefiles\\mdg_admbnda_adm2_BNGRC_OCHA_20181031.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 119 features and 13 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 43.17692 ymin: -25.60575 xmax: 50.48485 ymax: -11.95139\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "posts/map/mapdemo.html#convert-the-cities-to-an-sf-object",
    "href": "posts/map/mapdemo.html#convert-the-cities-to-an-sf-object",
    "title": "Humans Learning",
    "section": "Convert the cities to an sf object",
    "text": "Convert the cities to an sf object\nRemember that the cities object is a standard .csv with longitude and latitude columns, but it is not yet recognized as a spatial object. Let’s convert it to an sf object with a single geometry column and a crs.\n\ncities_sf &lt;- cities |&gt;\n  st_as_sf(coords = c(\"Longitude\", \"Latitude\")\n           , crs = 4326)\n\n#observe the first few rows of data\nDT::datatable(head(cities_sf))"
  },
  {
    "objectID": "posts/map/mapdemo.html#make-the-map-better",
    "href": "posts/map/mapdemo.html#make-the-map-better",
    "title": "Humans Learning",
    "section": "Make the map better",
    "text": "Make the map better\nThe map could use a title and the cities could use labels. Since we chose Madagascar the cities have long names and require us to create a bigger viewing window by adjusting the bounding box (bbox). Luckily it is not that hard. We can extract the current bbox using st_bbox() and then calculate the ranges of x and y values. We don’t need to completely max out viewing window so multiplying the bbox values by a percentage of each range does the trick. This may take some experimenting to see what works.\nThe x values are stored in slots 1 and 3 of the bbox and the y values in slots 2 and 4. Then, just make sure that the bbox_new object is an sf polygon and set the bbox to use it. From here, the layering process is the same, but there’s a new layer for the city labels and a title.\nNotice that tmap naturally avoids text overlapping, but with ggplot we have to use ggrepel to explicitly repel the label names from each other.\n\ntmapggplot2\n\n\n\n#the city names are long so we have to \n# make a bigger window to fit them. This isn't part of the normal process\n#make an object with the current bounding box\nbbox_new &lt;- st_bbox(mdg)\n\n#calculate the x and y ranges of the bbox\nxrange &lt;- bbox_new$xmax - bbox_new$xmin # range of x values\nyrange &lt;- bbox_new$ymax - bbox_new$ymin # range of y values\n\n#provide the new values for the 4 corners of the bbox\n  bbox_new[1] &lt;- bbox_new[1] - (0.7 * xrange) # xmin - left\n  bbox_new[3] &lt;- bbox_new[3] + (0.75 * xrange) # xmax - right\n  bbox_new[2] &lt;- bbox_new[2] - (0.1 * yrange) # ymin - bottom\n  bbox_new[4] &lt;- bbox_new[4] + (0.1 * yrange) # ymax - top\n\n#convert the bbox to a sf collection (sfc)\nbbox_new &lt;- bbox_new |&gt;  # take the bounding box ...\n  st_as_sfc() # ... and make it a sf polygon\n\n#now plot the map\ntmap_mode(\"plot\") +\n  tm_shape(mdg, bbox = bbox_new) +\n  tm_polygons() +\n  tm_shape(cities_sf) +\n  tm_dots(size = .25, col = \"red\", fill = \"red\") +\n  tm_text(text = \"Name\", auto.placement = T, size = .6) +\n  tm_layout(title = \"Main Cities of\\nMadagascar\")\n\n\n\n\n\n\n\n\n\n\n\n#the city names are long so we have to \n# make a bigger window to fit them. This isn't part of the normal process\n#make an object with the current bounding box\nbbox_new &lt;- st_bbox(mdg)\n\n#calculate the x and y ranges of the bbox\nxrange &lt;- bbox_new$xmax - bbox_new$xmin # range of x values\nyrange &lt;- bbox_new$ymax - bbox_new$ymin # range of y values\n\n#provide the new values for the 4 corners of the bbox\n  bbox_new[1] &lt;- bbox_new[1] - (0.5 * xrange) # xmin - left\n  bbox_new[3] &lt;- bbox_new[3] + (0.5 * xrange) # xmax - right\n  bbox_new[2] &lt;- bbox_new[2] - (0.1 * yrange) # ymin - bottom\n  bbox_new[4] &lt;- bbox_new[4] + (0.1 * yrange) # ymax - top\n\n#convert the bbox to a sf collection (sfc)\nbbox_new &lt;- bbox_new |&gt;  # take the bounding box\n  st_as_sfc() # ... and make it a sf polygon\n\n\nggplot2::ggplot() +\n  geom_sf(data = mdg) +\n  geom_sf(data = cities_sf, color = \"red\") +\n  ggrepel::geom_text_repel(data = cities_sf\n               , aes(label = Name\n                     , geometry = geometry)\n               , stat = \"sf_coordinates\"\n               , min.segment.length = 0) +\n  coord_sf(xlim = st_coordinates(bbox_new)[c(1,2),1], # min & max of x values\n           ylim = st_coordinates(bbox_new)[c(2,3),2]) + # min & max of y values +\n  labs(title = \"Main Cities of\\nMadagascar\") +\n  theme_void()"
  },
  {
    "objectID": "posts/map/mapdemo.html#final-touches",
    "href": "posts/map/mapdemo.html#final-touches",
    "title": "Humans Learning",
    "section": "Final touches",
    "text": "Final touches\nNow that we have a map with cities plotted (we achieved our goal!), we will add a few finishing touches and set the size of the city points to the population variable in the original dataset.\nAdditionally, tmap provides a simple interface to go from a static map to an interative map simply by changing tmap_mode(\"plot\") to tmap_mode(\"view\").\n\ntmapggplot2tmap interactive\n\n\n\n#the city names are long so we have to \n# make a bigger window to fit them. This isn't part of the normal process\n#make an object with the current bounding box\nbbox_new &lt;- st_bbox(mdg)\n\n#calculate the x and y ranges of the bbox\nxrange &lt;- bbox_new$xmax - bbox_new$xmin # range of x values\nyrange &lt;- bbox_new$ymax - bbox_new$ymin # range of y values\n\n#provide the new values for the 4 corners of the bbox\n  bbox_new[1] &lt;- bbox_new[1] - (0.7 * xrange) # xmin - left\n  bbox_new[3] &lt;- bbox_new[3] + (0.75 * xrange) # xmax - right\n  bbox_new[2] &lt;- bbox_new[2] - (0.1 * yrange) # ymin - bottom\n  bbox_new[4] &lt;- bbox_new[4] + (0.1 * yrange) # ymax - top\n\n#convert the bbox to a sf collection (sfc)\nbbox_new &lt;- bbox_new |&gt;  # take the bounding box ...\n  st_as_sfc() # ... and make it a sf polygon\ntmap::tmap_mode(\"plot\") +\n  tmap::tm_shape(mdg, bbox = bbox_new) +\n  tmap::tm_polygons() +\n  tmap::tm_shape(cities_sf) +\n  tmap::tm_dots(size = \"Population\", col = \"red\", fill = \"red\"\n          , legend.size.is.portrait = TRUE) +\n  tmap::tm_text(text = \"Name\", auto.placement = T\n          , along.lines = T, size = .6) +\n  #tmap::tm_scale_bar(position = c(\"left\", \"bottom\"), width = 0.15) +\n  tmap::tm_compass(type = \"4star\"\n             , position = c(\"right\", \"bottom\")\n             , size = 2) +\n  tmap::tm_layout(main.title = \"Main Cities of Madagascar\"                         , legend.outside = TRUE)\n\n\n\n\n\n\n\n\n\n\n\nggplot2::ggplot() +\n  geom_sf(data = mdg) +\n  geom_sf(data = cities_sf, aes(size = Population)\n          , color = \"red\") +\n  ggrepel::geom_text_repel(data = cities_sf\n               , aes(label = Name\n                     , geometry = geometry)\n               , stat = \"sf_coordinates\"\n               , min.segment.length = 0) +\n  coord_sf(xlim = st_coordinates(bbox_new)[c(1,2),1], # min & max of x values\n           ylim = st_coordinates(bbox_new)[c(2,3),2]) + # min & max of y values +\n  ggspatial::annotation_scale(location = \"bl\") +\n  ggspatial::annotation_north_arrow(location = \"br\"\n                                    , which_north = \"true\"\n                                    , size = 1)+\n  labs(title = \"Main Cities of Madagascar\") +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"view\") +\n  tm_shape(mdg) +\n  tm_borders() +\n  tm_shape(cities_sf) +\n  tm_dots(size = \"Population\", col = \"red\"\n          , legend.size.is.portrait = TRUE) +\n  tm_text(text = \"Name\", auto.placement = T\n          , along.lines = T) +\n  #tm_scale_bar(position = c(\"left\", \"bottom\"), width = 0.15) +\n  tm_compass(type = \"4star\"\n             , position = c(\"right\", \"bottom\")\n             , size = 2) +\n  tm_layout(main.title = \"Main Cities of Madagascar\"                         , legend.outside = TRUE)"
  }
]